PROP
{
	name = MAS_ASET_CRT_Display
	
	MODEL
	{
		model = ASET/ASET_Props/Instruments/ASET_CRT_Display/ASET_CRT_Display
	}

	// Monitor setup ========================================================================
	// One down side to this prop is that it can't convert color camera images to green-screen.
	// Which means the player can break 'immersion' by using color cameras.  Maybe I can add
	// a post-processing option to the CAMERA node?
	MODULE
	{
		name = MASMonitor

		screenTransform = ASET_CRT_Screen_Obj
		textureLayerID = _Emissive
		screenSize = 512, 340
		fontSize = 16, 32
		// 512 x 340 pixels / 16 x 32 font = 32 characters / 10 rows
		font = Press Start K
		textColor = COLOR_CRT_GREEN
		backgroundColor = 0, 8, 0, 255    // Background color
		monitorID = %AUTOID%

		page = MAS_CRT_MainMenu
		page = MAS_CRT_VesselTargetMenu
		page = MAS_CRT_MoonTargetMenu
		page = MAS_CRT_DockTargetMenu
		page = MAS_CRT_Camera
	}
	
	// Switches & buttons ====================================================================
	MODULE
	{
		name = MASComponent
		
		COLLIDER_EVENT
		{
			name = Power Switch
			collider = ASET_CRT_PRW_SwitchColiderObj
			onClick = fc.TogglePersistent("%AUTOID%-Power")
			sound = Squad/Sounds/sound_click_tick
			volume = 0.6
		}
		ANIMATION_PLAYER
		{
			name = Power Switch Animation
			animation = ASET_CRT_PWR_ON_Anim
			variable = fc.GetPersistentAsNumber("%AUTOID%-Power")
		}
		
		COLOR_SHIFT
		{
			name = Monitor on
			transform = ASET_CRT_Screen_Obj
			passiveColor = 0,0,0,255
			activeColor = 255,255,255,255
			variable = fc.Conditioned(fc.GetPersistentAsNumber("%AUTOID%-Power"))
			blend = true
		}

		// All of the button colliders use a variable based on the power switch.
		// This lets us ignore the buttons when the switch is 'off'.
		COLLIDER_EVENT
		{
			name = Mode Button
			collider = ASET_CRT_Button_MODE_TGGL_ColliderObj
			onClick = fc.SendSoftkey("%AUTOID%", 1)
			sound = Squad/Sounds/sound_click_tick
			volume = 0.6
			variable = fc.Conditioned(fc.GetPersistentAsNumber("%AUTOID%-Power"))
		}
		COLLIDER_EVENT
		{
			name = Previous Button
			collider = ASET_CRT_Button_PREV_ColliderObj
			onClick = fc.SendSoftkey("%AUTOID%", 2)
			sound = Squad/Sounds/sound_click_tick
			volume = 0.6
			variable = fc.Conditioned(fc.GetPersistentAsNumber("%AUTOID%-Power"))
		}
		COLLIDER_EVENT
		{
			name = Next Button
			collider = ASET_CRT_Button_NEXT_ColliderObj
			onClick = fc.SendSoftkey("%AUTOID%", 3)
			sound = Squad/Sounds/sound_click_tick
			volume = 0.6
			variable = fc.Conditioned(fc.GetPersistentAsNumber("%AUTOID%-Power"))
		}
		COLLIDER_EVENT
		{
			name = Enter Button
			collider = ASET_CRT_Button_ENTER_ColliderObj
			onClick = fc.SendSoftkey("%AUTOID%", 4)
			sound = Squad/Sounds/sound_click_tick
			volume = 0.6
			variable = fc.Conditioned(fc.GetPersistentAsNumber("%AUTOID%-Power"))
		}
		COLLIDER_EVENT
		{
			name = Back Button
			collider = ASET_CRT_Button_BACK_ColliderObj
			onClick = fc.SendSoftkey("%AUTOID%", 5)
			sound = Squad/Sounds/sound_click_tick
			volume = 0.6
			variable = fc.Conditioned(fc.GetPersistentAsNumber("%AUTOID%-Power"))
		}

		COLOR_SHIFT
		{
			name = Buttons backlight
			transform = ASET_CRT_Labels_Obj, ASET_CRT_MODE_TGGL_KeyObj, ASET_CRT_ENTER_KeyObj
			passiveColor = 0,0,0,255
			activeColor = COLOR_ASET_SWITCHER_NAME_POSITIVECOLOR
			variable = fc.Conditioned(fc.GetPersistentAsNumber("Backlight"))
			blend = true
		}
		COLOR_SHIFT
		{
			name = Tumbler backlight
			transform = SwitcherTumblerMark, ASET_CRT_PREV_KeyObj, ASET_CRT_NEXT_KeyObj, ASET_CRT_BACK_KeyObj
			passiveColor = 0,0,0,255
			activeColor = COLOR_ASET_SWITCHER_MARK_POSITIVECOLOR
			variable = fc.Conditioned(fc.GetPersistentAsNumber("Backlight"))
			blend = true
		}
	}
}
