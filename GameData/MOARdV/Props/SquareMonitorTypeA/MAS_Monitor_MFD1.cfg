PROP
{
	// Combined Electronic Indicator loosely modeled after the KEI / КЭИ
	name = MAS_Monitor_MFD1

	MODEL
	{
		model = MOARdV/Props/SquareMonitorTypeA/SquareMonitorTypeA
	}

	MODULE
	{
		name = MASMonitor

		screenTransform = MonitorScreen01 // Transform for the monitor
		textureLayerID = _Emissive        // Name of texture layer to work with on the screen surface.
		screenSize = 512, 512
		fontSize = 16, 32                 // Fixed font dimensions
		font = InconsolataGo
		style = Bold
		textColor = COLOR_ASET_NUMINPUT_DISPLAY_POSITIVECOLOR // Default color of text
		backgroundColor = 8, 8, 5, 255    // Background color
		monitorID = MAS_MFD1
		
		// Not implemented yet:
		//variable = fc.GetPowered()
		//range = 0.5, 1.1
		//disabledColor = 0,0,0,0

		page = MAS_MFD_Standby
		page = MAS_MFD_Ascent
		page = MAS_MFD_Orbit
		page = MAS_MFD_Maneuver
		page = MAS_MFD_Rendezvous
		page = MAS_MFD_Docking
		page = MAS_MFD_Systems
		page = MAS_MFD_Reentry
		page = MAS_MFD_Cameras
	}
}

MAS_PAGE
{
	name =  MAS_MFD_Standby

	// Page off...
	// ... or some debug text.
	//TEXT
	//{
	//	name = debug stuff
	//	text = dV(r): <=0:0.0=> $&$ transfer.DeltaVInitial(40000)
	//}
}

MAS_PAGE
{
	name =  MAS_MFD_Systems

	// Orbital metrics
	TEXT	
	{
		name = Static page text
		textfile = MOARdV/Props/SquareMonitorTypeA/monitor/mfd_1_systems.txt
	}
	TEXT
	{
		name = Time
		text = UT : <=0:METhh:mm:ss=>    MET: <=1:METhh:mm:ss=> $&$ fc.TimeOfDay(fc.UT()); fc.Min(fc.MET(), 359999)
		position = 0,15
	}
	TEXT
	{
		name = Maneuver Warning
		text = MNVR:   <=0,6:0.0=>m/s     <=1:METhh:mm:ss=> $&$ fc.ManeuverNodeDV(); fc.Min(fc.ManeuverNodeTime(), 359999)
		position = 0,14
		variable = fc.ManeuverNodeExists() * fc.VesselFlying()
	}
}

MAS_PAGE
{
	name =  MAS_MFD_Ascent

	// Ascent metrics
	TEXT	
	{
		name = Static page text
		textfile = MOARdV/Props/SquareMonitorTypeA/monitor/mfd_2_ascent.txt
	}
	TEXT
	{
		name = Time
		text = UT : <=0:METhh:mm:ss=>    MET: <=1:METhh:mm:ss=> $&$ fc.TimeOfDay(fc.UT()); fc.Min(fc.MET(), 359999)
		position = 0,15
	}
	TEXT
	{
		name = Invalid data text
		textfile = MOARdV/Props/SquareMonitorTypeA/monitor/mfd_2_ascent_nodata.txt
		position = 5,2
		// Don't show data if we're in space, or we're not flying
		variable = fc.Periapsis() >= fc.AtmosphereTop()
	}
	TEXT
	{
		name = Data
		textfile = MOARdV/Props/SquareMonitorTypeA/monitor/mfd_2_ascent_data.txt
		position = 5,2
		// Show data if we're not in space and we're flying
		variable = fc.Periapsis() < fc.AtmosphereTop()
	}
}

MAS_PAGE
{
	name =  MAS_MFD_Orbit

	// Orbital metrics
	TEXT	
	{
		name = Static page text
		textfile = MOARdV/Props/SquareMonitorTypeA/monitor/mfd_3_orbit.txt
	}
	TEXT
	{
		name = Time
		text = UT : <=0:METhh:mm:ss=>    MET: <=1:METhh:mm:ss=> $&$ fc.TimeOfDay(fc.UT()); fc.Min(fc.MET(), 359999)
		position = 0,15
	}
	TEXT
	{
		name = Invalid data text
		textfile = MOARdV/Props/SquareMonitorTypeA/monitor/mfd_3_orbit_nodata.txt
		position = 5,2
		// Don't show data if we're not flying
		variable = fc.VesselLanded()
	}
	TEXT
	{
		name = Data
		textfile = MOARdV/Props/SquareMonitorTypeA/monitor/mfd_3_orbit_data.txt
		position = 5,2
		// Show data if we're flying
		variable = fc.VesselFlying()
	}
	TEXT
	{
		name = Maneuver Warning
		text = MNVR:   <=0,6:0.0=>m/s     <=1:METhh:mm:ss=> $&$ fc.ManeuverNodeDV(); fc.Min(fc.ManeuverNodeTime(), 359999)
		position = 0,14
		variable = fc.ManeuverNodeExists() * fc.VesselFlying()
	}
}

MAS_PAGE
{
	name =  MAS_MFD_Maneuver

	// Orbital metrics
	TEXT	
	{
		name = Static page text
		textfile = MOARdV/Props/SquareMonitorTypeA/monitor/mfd_4_maneuver.txt
	}
	TEXT
	{
		name = Time
		text = UT : <=0:METhh:mm:ss=>    MET: <=1:METhh:mm:ss=> $&$ fc.TimeOfDay(fc.UT()); fc.Min(fc.MET(), 359999)
		position = 0,15
	}
	TEXT
	{
		name = Invalid data text
		textfile = MOARdV/Props/SquareMonitorTypeA/monitor/mfd_4_maneuver_nodata.txt
		position = 5,2
		// Don't show data if there is no node
		variable = 1 - fc.ManeuverNodeExists()
	}
	TEXT
	{
		name = Data
		textfile = MOARdV/Props/SquareMonitorTypeA/monitor/mfd_4_maneuver_data.txt
		position = 5,2
		variable = fc.ManeuverNodeExists()
	}
}

MAS_PAGE
{
	name =  MAS_MFD_Rendezvous

	// Orbital metrics
	TEXT	
	{
		name = Static page text
		textfile = MOARdV/Props/SquareMonitorTypeA/monitor/mfd_5_rendezvous.txt
	}
	TEXT
	{
		name = Time
		text = UT : <=0:METhh:mm:ss=>    MET: <=1:METhh:mm:ss=> $&$ fc.TimeOfDay(fc.UT()); fc.Min(fc.MET(), 359999)
		position = 0,15
	}
	TEXT
	{
		name = Invalid data text
		textfile = MOARdV/Props/SquareMonitorTypeA/monitor/mfd_5_rendezvous_nodata.txt
		position = 5,2
		variable = fc.TargetType() == 0
	}
	TEXT
	{
		name = Data
		textfile = MOARdV/Props/SquareMonitorTypeA/monitor/mfd_5_rendezvous_data.txt
		position = 5,2
		variable = fc.TargetType()
	}
	TEXT
	{
		name = Maneuver Warning
		text = MNVR:   <=0,6:0.0=>m/s     <=1:METhh:mm:ss=> $&$ fc.ManeuverNodeDV(); fc.Min(fc.ManeuverNodeTime(), 359999)
		position = 0,14
		variable = fc.ManeuverNodeExists() * fc.VesselFlying()
	}
}

MAS_PAGE
{
	name =  MAS_MFD_Docking

	CAMERA
	{
		name = Docking port camera
		position = 0, 0
		size = 512,512
		camera = "DockCam"
		variable = fc.TargetType() == 2
	}
	IMAGE
	{
		name = Docking port overlay
		texture = MOARdV/Props/SquareMonitorTypeA/monitor/DockingMarkers
		position = 0,0
		size = 512,512
	}
	TEXT	
	{
		name = Static page text
		textfile = MOARdV/Props/SquareMonitorTypeA/monitor/mfd_6_docking.txt
	}
	TEXT
	{
		name = Time
		text = UT : <=0:METhh:mm:ss=>    MET: <=1:METhh:mm:ss=> $&$ fc.TimeOfDay(fc.UT()); fc.Min(fc.MET(), 359999)
		position = 0,15
	}
	TEXT
	{
		name = Invalid data text
		textfile = MOARdV/Props/SquareMonitorTypeA/monitor/mfd_6_docking_nodata.txt
		position = 2,1
		variable = fc.TargetType() ~= 2
	}
	TEXT
	{
		name = Data text
		textfile = MOARdV/Props/SquareMonitorTypeA/monitor/mfd_6_docking_data.txt
		position = 2,1
		variable = fc.TargetType() == 2
	}
	TEXT
	{
		name = Maneuver Warning
		text = MNVR:   <=0,6:0.0=>m/s     <=1:METhh:mm:ss=> $&$ fc.ManeuverNodeDV(); fc.Min(fc.ManeuverNodeTime(), 359999)
		position = 0,14
		variable = fc.ManeuverNodeExists() * fc.VesselFlying()
	}
	TEXT
	{
		name = Approach Prompt
		text = APPROACH
		position = 12, 5
		variable = (fc.TargetType() == 2) * (fc.TargetVelocityZ() > 0)
	}
	TEXT
	{
		name = Depart Prompt
		text = DEPART
		position = 13, 5
		variable = (fc.TargetType() == 2) * (fc.TargetVelocityZ() < 0)
	}
	TEXT
	{
		name = Approach Rate
		text = SPEED
		position = 13.5, 6
		variable = (fc.TargetType() == 2) * ((fc.TargetVelocityZ()*10) > fc.TargetDistanceZ()) * fc.Between(fc.TargetDistanceZ(), 0, 10) * fc.Period(2)
	}
	TEXT
	{
		name = Center Marker
		font = Liberation Sans
		style = Bold
		position = 14.5,7
		text = ┌─┐$$$└─┘
		variable = (fc.TargetType() == 2) * fc.Between(fc.TargetDistanceZ(), 0, 5)
	}
	TEXT
	{
		name = Velocity Marker
		font = Liberation Sans
		style = Bold
		// Text center ends up being (248, 240), so base displacements from there
		text = [@x<=0=>][@y<=1=>]● $&$ fc.Remap(fc.TargetVelocityX(), -1.0, 1.0, 0, 496);  fc.Remap(fc.TargetVelocityY(), -1.0, 1.0, 0, 480)
		variable = fc.TargetType() == 2
		textColor = 255, 0, 128, 192
	}
	TEXT
	{
		name = Displacement Marker
		font = Liberation Sans
		style = Bold
		text = [@x<=0=>][@y<=1=>]►◄ $&$ fc.Remap(fc.TargetDistanceX(), -2.5, 2.5, 0, 480);  fc.Remap(fc.TargetDistanceY(), 2.5, -2.5, 0, 480)
		variable = fc.TargetType() == 2
		textColor = 0, 255, 128, 192
	}
}

MAS_PAGE
{
	name =  MAS_MFD_Reentry

	TEXT	
	{
		name = Static page text
		textfile = MOARdV/Props/SquareMonitorTypeA/monitor/mfd_7_reentry.txt
	}
	TEXT
	{
		name = Time
		text = UT : <=0:METhh:mm:ss=>    MET: <=1:METhh:mm:ss=> $&$ fc.TimeOfDay(fc.UT()); fc.Min(fc.MET(), 359999)
		position = 0,15
	}
	TEXT
	{
		name = Invalid data text
		textfile = MOARdV/Props/SquareMonitorTypeA/monitor/mfd_7_reentry_nodata.txt
		position = 5,2
		variable = fc.VesselLanded() + (fc.Periapsis() > fc.AtmosphereTop())
	}
	TEXT
	{
		name = Data
		textfile = MOARdV/Props/SquareMonitorTypeA/monitor/mfd_7_reentry_data.txt
		position = 5,2
		variable = fc.VesselFlying() * (fc.Periapsis() <= fc.AtmosphereTop())
	}
	TEXT
	{
		name = Landing No Data
		textfile = MOARdV/Props/SquareMonitorTypeA/monitor/mfd_7_reentry_nolanding.txt
		position = 5,2
		// Hide data
		//variable = 1 - fc.GetBrakes()
		variable = 1 - mechjeb.LandingComputerActive()
	}
	TEXT
	{
		name = Landing Data
		textfile = MOARdV/Props/SquareMonitorTypeA/monitor/mfd_7_reentry_landing.txt
		position = 5,2
		// Show data
		//variable = fc.GetBrakes()
		variable =  mechjeb.LandingComputerActive()
	}
}

MAS_PAGE
{
	name =  MAS_MFD_Cameras

	CAMERA
	{
		name = Camera Display
		position = 0, 0
		size = 512, 512
		camera = fc.GetCameraName(fc.GetPersistentAsNumber("MAS_MFD1_CameraIndex"))
		variable = fc.CameraCount()
		shader = MOARdV/ColorNoise
		properties = _NoiseOffset:fc.RandomNormal(0, 0.135);_Blend:0.95 - fc.Random() * 0.10
		texture = ASET/ASET_Props/MFDs/ScreenPlates/noise
	}
	TEXT	
	{
		name = Static page text
		text = FORM08 - CAMERAS
	}
	TEXT
	{
		name = Camera Name
		text = <=0=> $&$ fc.GetCameraName(fc.GetPersistentAsNumber("MAS_MFD1_CameraIndex"))
		variable = fc.CameraCount()
		position = 0,2
	}
	TEXT
	{
		name = No Cameras
		text = NO CAMERAS INSTALLED
		variable = fc.CameraCount() == 0
		position = 0,2
	}
	
	TEXT
	{
		name = Time
		text = UT : <=0:METhh:mm:ss=>    MET: <=1:METhh:mm:ss=> $&$ fc.TimeOfDay(fc.UT()); fc.Min(fc.MET(), 359999)
		position = 0,15
	}
}
