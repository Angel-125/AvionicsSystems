MAS_SUB_PAGE
{
	name = Orbital Data Display

	// 4 rows of data: Current altitude, Ap/Inc, Pe, OSpd/Period
	TEXT
	{
		name = Orbital data caption
		text = Alt :         km$$$Ap  :         km in               Inc:      Â°$$$Pe  :         km in$$$OSpd:         m/s       Period:
	}
	TEXT
	{
		name = Orbital data values
		text = <=0,9:#,#0.0=>$&$ fc.Altitude() * 0.001$$$<=0,9:#,#0.0=>      <=1:METddd/hh:mm:ss=>      <=2,6:0.0=>$&$ fc.Apoapsis() * 0.001; fc.TimeToAp();fc.Inclination()$$$<=0,9:#,#0.0=>      <=1:METddd/hh:mm:ss=>$&$fc.Periapsis() * 0.001; fc.TimeToPe()$$$<=0,9:#,#0.0=>                  <=1:METddd/hh:mm:ss=>$&$fc.OrbitSpeed(); fc.OrbitPeriod()
		position = 5, 0
		textColor = COLOR_MFD2_TEXT_HIGHLIGHT
	}
}

MAS_SUB_PAGE
{
	name = Orbit Map 512x256
	// This is the Kerbin / Mun / Minmus orbital map sized for 512 x 256 presentation.
	// The origin of this sub page is the top-left corner of the map.  There in one row
	// of text above the origin for the legend.

	IMAGE
	{
		name = Kerbin Map
		texture = ASET/ASET_Props/Instruments/ASET_IMP/map_Kerbin_sat
		position = 0, 0
		size = 512, 256
		uvShift = fc.Remap(fc.Longitude(), -180, 180, -0.5, 0.5), 0
		variable = fc.BodyIsHome(fc.CurrentBodyIndex()) * (1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode"))
	}
	IMAGE
	{
		name = Mun Map
		texture = MOARdV/MFD/map_Mun_sat
		position = 0, 0
		size = 512, 256
		uvShift = fc.Remap(fc.Longitude(), -180, 180, -0.5, 0.5), 0
		variable = fc.Select(fc.CurrentBodyIndex() == fc.BodyIndex("Mun"), 1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode"), 0)
	}
	IMAGE
	{
		name = Minmus Map
		texture = MOARdV/MFD/map_Minmus_sat
		position = 0, 0
		size = 512, 256
		uvShift = fc.Remap(fc.Longitude(), -180, 180, -0.5, 0.5), 0
		variable = fc.Select(fc.CurrentBodyIndex() == fc.BodyIndex("Minmus"), 1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode"), 0)
	}
	IMAGE
	{
		name = Generic Terminator
		texture = MOARdV/MFD/dayNight128x128
		position = 0, 0
		size = 512, 256
		uvShift = fc.Remap(fc.NormalizeLongitude(fc.BodySunLongitude(fc.CurrentBodyIndex()) - fc.Longitude()), 180, -180, -0.5, 0.5), 0
	}
	GROUND_TRACK
	{
		name = Ground track
		position = 0, 0
		size = 512
		lineWidth = 4
		vertexCount = 32
		vesselColor = COLOR_XKCD_KSPUNNAMEDCYAN
		targetColor = 255, 0, 255, 255
		maneuverColor = COLOR_XKCD_KSPNOTSOGOODORANGE

		startLongitude = fc.Longitude() - 180
	}
	LINE_STRING
	{
		name = CommNet Latitude
		position = 0, 0
		startColor = 255, 255, 55, 255
		startWidth = 4
		texture = MOARdV/MFD/dashedLine32x4

		vertex = 0, fc.Remap(fc.CommNetLatitude(), 90, -90, 0, 255)
		vertex = 511, fc.Remap(fc.CommNetLatitude(), 90, -90, 0, 255)

		variable = fc.BodyIsHome(fc.CurrentBodyIndex()) * fc.CommNetSignalQuality() * (1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode"))
	}
	LINE_STRING
	{
		name = CommNet Longitude
		position = 0, 0
		startColor = 255, 255, 55, 255
		startWidth = 4
		texture = MOARdV/MFD/dashedLine32x4

		vertex = fc.Remap(fc.NormalizeLongitude(fc.CommNetLongitude() - fc.Longitude()), -180, 180, 0, 511), 0
		vertex = fc.Remap(fc.NormalizeLongitude(fc.CommNetLongitude() - fc.Longitude()), -180, 180, 0, 511), 256

		variable = fc.BodyIsHome(fc.CurrentBodyIndex()) * fc.CommNetSignalQuality() * (1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode"))
	}
	LINE_STRING
	{
		name = Target Latitude
		position = 0, 0
		startColor = 255, 0, 255, 255
		startWidth = 4
		texture = MOARdV/MFD/dashedLine32x4

		vertex = 0, fc.Remap(fc.TargetLatitude(), 90, -90, 0, 255)
		vertex = 511, fc.Remap(fc.TargetLatitude(), 90, -90, 0, 255)

		variable = fc.TargetLatLonValid() * fc.TargetSameSoI() * (1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode"))
	}
	LINE_STRING
	{
		name = Target Longitude
		position = 0, 0
		startColor = 255, 0, 255, 255
		startWidth = 4
		texture = MOARdV/MFD/dashedLine32x4

		vertex = fc.Remap(fc.NormalizeLongitude(fc.TargetLongitude() - fc.Longitude()), -180, 180, 0, 511), 0
		vertex = fc.Remap(fc.NormalizeLongitude(fc.TargetLongitude() - fc.Longitude()), -180, 180, 0, 511), 256

		variable = fc.TargetLatLonValid() * fc.TargetSameSoI() * (1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode"))
	}
	LINE_STRING
	{
		name = Landing Latitude
		position = 0, 0
		startColor = 255, 0, 0, 255
		startWidth = 4
		texture = MOARdV/MFD/dashedLine32x4

		vertex = 0, fc.Remap(fc.LandingLatitude(), 90, -90, 0, 255)
		vertex = 511, fc.Remap(fc.LandingLatitude(), 90, -90, 0, 255)

		variable = fc.LandingPredictorActive() * fc.VesselFlying() * (1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode"))
	}
	LINE_STRING
	{
		name = Landing Longitude
		position = 0, 0
		startColor = 255, 0, 0, 255
		startWidth = 4
		texture = MOARdV/MFD/dashedLine32x4

		vertex = fc.Remap(fc.NormalizeLongitude(fc.LandingLongitude() - fc.Longitude()), -180, 180, 0, 511), 0
		vertex = fc.Remap(fc.NormalizeLongitude(fc.LandingLongitude() - fc.Longitude()), -180, 180, 0, 511), 256

		variable = fc.LandingPredictorActive() * fc.VesselFlying() * (1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode"))
	}
	LINE_STRING
	{
		name = Waypoint Latitude
		position = 0, 0
		startColor = 0, 255, 0, 255
		startWidth = 4
		texture = MOARdV/MFD/dashedLine32x4

		vertex = 0, fc.Remap(nav.WaypointLatitude(-1), 90, -90, 0, 255)
		vertex = 511, fc.Remap(nav.WaypointLatitude(-1), 90, -90, 0, 255)

		variable = nav.WaypointActive() * (1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode"))
	}
	LINE_STRING
	{
		name = Waypoint Longitude
		position = 0, 0
		startColor = 0, 255, 0, 255
		startWidth = 4
		texture = MOARdV/MFD/dashedLine32x4

		vertex = fc.Remap(fc.NormalizeLongitude(nav.WaypointLongitude(-1) - fc.Longitude()), -180, 180, 0, 511), 0
		vertex = fc.Remap(fc.NormalizeLongitude(nav.WaypointLongitude(-1) - fc.Longitude()), -180, 180, 0, 511), 256

		variable = nav.WaypointActive() * (1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode"))
	}
	LINE_STRING
	{
		name = Vessel Latitude
		position = 0, 0
		startColor = COLOR_XKCD_KSPUNNAMEDCYAN
		startWidth = 4
		texture = MOARdV/MFD/dashedLine32x4

		vertex = 0, fc.Remap(fc.Latitude(), 90, -90, 0, 255)
		vertex = 511, fc.Remap(fc.Latitude(), 90, -90, 0, 255)
		variable = 1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode")
	}
	LINE_STRING
	{
		name = Vessel Longitude
		position = 0, 0
		startColor = COLOR_XKCD_KSPUNNAMEDCYAN
		startWidth = 4
		texture = MOARdV/MFD/dashedLine32x4

		vertex = 255, 0
		vertex = 255, 255
		variable = 1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode")
	}
	TEXT
	{
		name = Map Legend
		position = 0, -1
		text = SHIP
		textColor = COLOR_XKCD_KSPUNNAMEDCYAN
	}
	TEXT
	{
		name = Target Legend
		position = 5.6 + 0.5, -1
		text = [#<=0:"ff00ff";"7f7f7f"=>]TGT $&$ fc.TargetType() - 0.5
	}
	TEXT
	{
		name = Waypoint Legend
		position = 11.2 - 0.5, -1
		text = [#<=0:"00ff00";"7f7f7f"=>]WAYPT $&$ (nav.WaypointActive() * (1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode"))) - 0.5
	}
	TEXT
	{
		name = Maneuver Legend
		position = 16.8, -1
		text = [#<=0:"ffb000";"7f7f7f"=>]MNVR $&$ fc.ManeuverNodeExists() - 0.5
	}
	TEXT
	{
		name = Landing Legend
		position = 22.4, -1
		text = [#<=0:"ff0000";"7f7f7f"=>]LNDG $&$ (fc.LandingPredictorActive() * fc.VesselFlying() * (1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode"))) - 0.5
	}
	TEXT
	{
		name = Ground Station Legend
		position = 28, -1
		text = [#<=0:"ffff37";"7f7f7f"=>]COMM $&$ (fc.BodyIsHome(fc.CurrentBodyIndex()) * fc.CommNetSignalQuality() * (1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode"))) - 0.5
	}
}

MAS_SUB_PAGE
{
	name = Orbit Map 640x320
	// This is the Kerbin / Mun / Minmus orbital map sized for 640 x 320 presentation.
	// The origin of this sub page is the top-left corner of the map.  There are two rows
	// of text above the origin for the legend.

	IMAGE
	{
		name = Kerbin Map
		texture = ASET/ASET_Props/Instruments/ASET_IMP/map_Kerbin_sat
		position = 0, 0
		size = 640, 320
		uvShift = fc.Remap(fc.Longitude(), -180, 180, -0.5, 0.5), 0
		variable = fc.BodyIsHome(fc.CurrentBodyIndex()) * (1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode"))
	}
	IMAGE
	{
		name = Mun Map
		texture = MOARdV/MFD/map_Mun_sat
		position = 0, 0
		size = 640, 320
		uvShift = fc.Remap(fc.Longitude(), -180, 180, -0.5, 0.5), 0
		variable = fc.Select(fc.CurrentBodyIndex() == fc.BodyIndex("Mun"), 1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode"), 0)
	}
	IMAGE
	{
		name = Minmus Map
		texture = MOARdV/MFD/map_Minmus_sat
		position = 0, 0
		size = 640, 320
		uvShift = fc.Remap(fc.Longitude(), -180, 180, -0.5, 0.5), 0
		variable = fc.Select(fc.CurrentBodyIndex() == fc.BodyIndex("Minmus"), 1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode"), 0)
	}
	IMAGE
	{
		name = Generic Terminator
		texture = MOARdV/MFD/dayNight128x128
		position = 0, 0
		size = 640, 320
		uvShift = fc.Remap(fc.NormalizeLongitude(fc.BodySunLongitude(fc.CurrentBodyIndex()) - fc.Longitude()), 180, -180, -0.5, 0.5), 0
	}
	GROUND_TRACK
	{
		name = Ground track
		position = 0, 0
		size = 640
		lineWidth = 4
		vertexCount = 32
		vesselColor = COLOR_XKCD_KSPUNNAMEDCYAN
		targetColor = 255, 0, 255, 255
		maneuverColor = COLOR_XKCD_KSPNOTSOGOODORANGE

		startLongitude = fc.Longitude() - 180
	}
	LINE_STRING
	{
		name = CommNet Latitude
		position = 0, 0
		startColor = 255, 255, 55, 255
		startWidth = 4
		texture = MOARdV/MFD/dashedLine32x4

		vertex = 0, fc.Remap(fc.CommNetLatitude(), 90, -90, 0, 319)
		vertex = 639, fc.Remap(fc.CommNetLatitude(), 90, -90, 0, 319)

		variable = fc.BodyIsHome(fc.CurrentBodyIndex()) * fc.CommNetSignalQuality() * (1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode"))
	}
	LINE_STRING
	{
		name = CommNet Longitude
		position = 0, 0
		startColor = 255, 255, 55, 255
		startWidth = 4
		texture = MOARdV/MFD/dashedLine32x4

		vertex = fc.Remap(fc.NormalizeLongitude(fc.CommNetLongitude() - fc.Longitude()), -180, 180, 0, 639), 0
		vertex = fc.Remap(fc.NormalizeLongitude(fc.CommNetLongitude() - fc.Longitude()), -180, 180, 0, 639), 320

		variable = fc.BodyIsHome(fc.CurrentBodyIndex()) * fc.CommNetSignalQuality() * (1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode"))
	}
	LINE_STRING
	{
		name = Target Latitude
		position = 0, 0
		startColor = 255, 0, 255, 255
		startWidth = 4
		texture = MOARdV/MFD/dashedLine32x4

		vertex = 0, fc.Remap(fc.TargetLatitude(), 90, -90, 0, 319)
		vertex = 639, fc.Remap(fc.TargetLatitude(), 90, -90, 0, 319)

		variable = fc.TargetLatLonValid() * fc.TargetSameSoI() * (1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode"))
	}
	LINE_STRING
	{
		name = Target Longitude
		position = 0, 0
		startColor = 255, 0, 255, 255
		startWidth = 4
		texture = MOARdV/MFD/dashedLine32x4

		vertex = fc.Remap(fc.NormalizeLongitude(fc.TargetLongitude() - fc.Longitude()), -180, 180, 0, 639), 0
		vertex = fc.Remap(fc.NormalizeLongitude(fc.TargetLongitude() - fc.Longitude()), -180, 180, 0, 639), 320

		variable = fc.TargetLatLonValid() * fc.TargetSameSoI() * (1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode"))
	}
	LINE_STRING
	{
		name = Landing Latitude
		position = 0, 0
		startColor = 255, 0, 0, 255
		startWidth = 4
		texture = MOARdV/MFD/dashedLine32x4

		vertex = 0, fc.Remap(fc.LandingLatitude(), 90, -90, 0, 319)
		vertex = 639, fc.Remap(fc.LandingLatitude(), 90, -90, 0, 319)

		variable = fc.LandingPredictorActive() * fc.VesselFlying() * (1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode"))
	}
	LINE_STRING
	{
		name = Landing Longitude
		position = 0, 0
		startColor = 255, 0, 0, 255
		startWidth = 4
		texture = MOARdV/MFD/dashedLine32x4

		vertex = fc.Remap(fc.NormalizeLongitude(fc.LandingLongitude() - fc.Longitude()), -180, 180, 0, 639), 0
		vertex = fc.Remap(fc.NormalizeLongitude(fc.LandingLongitude() - fc.Longitude()), -180, 180, 0, 639), 320

		variable = fc.LandingPredictorActive() * fc.VesselFlying() * (1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode"))
	}
	LINE_STRING
	{
		name = Waypoint Latitude
		position = 0, 0
		startColor = 0, 255, 0, 255
		startWidth = 4
		texture = MOARdV/MFD/dashedLine32x4

		vertex = 0, fc.Remap(nav.WaypointLatitude(-1), 90, -90, 0, 319)
		vertex = 639, fc.Remap(nav.WaypointLatitude(-1), 90, -90, 0, 319)

		variable = nav.WaypointActive() * (1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode"))
	}
	LINE_STRING
	{
		name = Waypoint Longitude
		position = 0, 0
		startColor = 0, 255, 0, 255
		startWidth = 4
		texture = MOARdV/MFD/dashedLine32x4

		vertex = fc.Remap(fc.NormalizeLongitude(nav.WaypointLongitude(-1) - fc.Longitude()), -180, 180, 0, 639), 0
		vertex = fc.Remap(fc.NormalizeLongitude(nav.WaypointLongitude(-1) - fc.Longitude()), -180, 180, 0, 639), 320

		variable = nav.WaypointActive() * (1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode"))
	}
	LINE_STRING
	{
		name = Vessel Latitude
		position = 0, 0
		startColor = COLOR_XKCD_KSPUNNAMEDCYAN
		startWidth = 4
		texture = MOARdV/MFD/dashedLine32x4

		vertex = 0, fc.Remap(fc.Latitude(), 90, -90, 0, 319)
		vertex = 639, fc.Remap(fc.Latitude(), 90, -90, 0, 319)
		variable = 1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode")
	}
	LINE_STRING
	{
		name = Vessel Longitude
		position = 0, 0
		startColor = COLOR_XKCD_KSPUNNAMEDCYAN
		startWidth = 4
		texture = MOARdV/MFD/dashedLine32x4

		vertex = 319, 0
		vertex = 319, 319
		variable = 1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode")
	}
	TEXT
	{
		name = Map Legend
		text = OWNSHIP
		textColor = COLOR_XKCD_KSPUNNAMEDCYAN
		position = 0, -1
	}
	TEXT
	{
		name = Target Legend
		text = [#<=0:"ff00ff";"7f7f7f"=>]TARGET $&$ fc.TargetType() - 0.5
		position = 17, -2
	}
	TEXT
	{
		name = Waypoint Legend
		text = [#<=0:"00ff00";"7f7f7f"=>]WAYPOINT $&$ (nav.WaypointActive() * (1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode"))) - 0.5
		position = 32, -2
	}
	TEXT
	{
		name = Maneuver Legend
		text = [#<=0:"ffb000";"7f7f7f"=>]MANEUVER $&$ fc.ManeuverNodeExists() - 0.5
		position = 0, -2
	}
	TEXT
	{
		name = Landing Legend
		text = [#<=0:"ff0000";"7f7f7f"=>]LANDING $&$ (fc.LandingPredictorActive() * fc.VesselFlying() * (1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode"))) - 0.5
		position = 16.5, -1
	}
	TEXT
	{
		name = Ground Station Legend
		text = [#<=0:"ffff37";"7f7f7f"=>]COMMNET $&$ (fc.BodyIsHome(fc.CurrentBodyIndex()) * fc.CommNetSignalQuality() * (1.0 - fc.GetPersistentAsNumber("%AUTOID%-OrbitDisplayMode"))) - 0.5
		position = 33, -1
	}
}

MAS_SUB_PAGE
{
	name = FDAI Prograde
	// This sub-page contains the error needles for a prograde indicator (surface, orbit, or target,
	// depending on the SAS mode).  Goes after the NAVBALL node, and before the FDAI Mask SUB_PAGE
	// in the PAGE config.
	// Origin is the center of the nav ball (use the same 'position' the navball uses).  Assumes 512x512 navball.
	
	LINE_STRING
	{
		name = Prograde yaw line

		position = 0, 0

		startColor = COLOR_XKCD_KSPNOTSOGOODORANGE

		startWidth = 6

		vertex = fc.Remap(fc.YawActivePrograde(), -16, 16, -128, 128), 0
		vertex = fc.Remap(fc.YawActivePrograde(), -16, 16, -128, 128), 256
	}
	LINE_STRING
	{
		name = Prograde pitch line

		position = 0, 0

		startColor = COLOR_XKCD_KSPNOTSOGOODORANGE

		startWidth = 6

		vertex = 0, fc.Remap(fc.PitchActivePrograde(), -16, 16, -128, 128)
		vertex = 256, fc.Remap(fc.PitchActivePrograde(), -16, 16, -128, 128)
	}
}

MAS_SUB_PAGE
{
	name = FDAI Mask
	// This is the collection of components "above" the error needles in a PFD / FDAI / NavBall stack.
	// The error needles go underneath this component (list them before this in the page), and the
	// NAVBALL goes underneath the needles.
	// Origin is the center of the nav ball (use the same 'position' the navball uses).  Assumes 512x512 navball
	
	//position = 512, 352
	IMAGE
	{
		name = Navball Mask
		texture = MOARdV/MFD/navBallMask512x512
		position = -256, -256
	}
	IMAGE
	{
		name = Roll Rate Border
		texture = MOARdV/MFD/frame6ch112x48
		position = -56, -256
		passiveColor = COLOR_MFD2_TEXT
	}
	IMAGE
	{
		name = Roll Rate Scale
		texture = MOARdV/MFD/bottomTickmark32x256
		position = -56, -224
		//rotation = 180
		size = 112, 16
		passiveColor = COLOR_MFD2_TEXT
	}
	TEXT
	{
		name = Roll Rate Chevron
		text = â¼
		position = -0.5 - fc.Clamp(fc.RollRate() * 0.5, -2.75, 2.75), -8
		textColor = COLOR_MFD2_TEXT_HIGHLIGHT
	}
	IMAGE
	{
		name = Pitch Rate Border
		texture = MOARdV/MFD/frame6ch112x48
		position = 208, 56
		//position = 208, -56
		rotationOffset = -56, -24
		rotation = 90
		passiveColor = COLOR_MFD2_TEXT
	}
	IMAGE
	{
		name = Pitch Rate Scale
		texture = MOARdV/MFD/bottomTickmark32x256
		position = 208, -72
		rotationOffset = -56, 8
		rotation = -90
		size = 112, 16
		passiveColor = COLOR_MFD2_TEXT
	}
	TEXT
	{
		name = Pitch Rate Chevron
		text = â
		position = 14, -0.5 - fc.Clamp(fc.PitchRate() * 0.25, -1.5, 1.5)
		textColor = COLOR_MFD2_TEXT_HIGHLIGHT
	}
	IMAGE
	{
		name = Yaw Rate Border
		texture = MOARdV/MFD/frame6ch112x48
		position = -56, 192
		passiveColor = COLOR_MFD2_TEXT
	}
	IMAGE
	{
		name = Yaw Rate Scale
		texture = MOARdV/MFD/bottomTickmark32x256
		position = -56, 192
		rotation = 180
		size = 112, 16
		passiveColor = COLOR_MFD2_TEXT
	}
	TEXT
	{
		name = Yaw Rate Chevron
		text = â²
		position = -0.5 + fc.Clamp(fc.YawRate() * 0.5, -2.75, 2.75), 6.5
		textColor = COLOR_MFD2_TEXT_HIGHLIGHT
	}

	IMAGE
	{
		name = Mode Border
		texture = MOARdV/MFD/frame4ch80x48
		position = -60, 240
		size = 120, 72
		passiveColor = COLOR_MFD2_TEXT
	}
	TEXT
	{
		name = Mode
		text = <=0=> $&$ fc.Select(fc.GetSASSpeedMode(), "TGT","SRF","OBT")
		position = -2, 7.875
		//position = 30, 18.875
		fontSize = 24, 48
		textColor = COLOR_MFD2_TEXT_HIGHLIGHT
	}
}

MAS_SUB_PAGE
{
	name = 3/4 Circle Gauge
	// This is a hollow 3/4 circle usable as a gauge.
	// Inspired by the IndicatorCircular ASET prop and the gauges used in SpaceX launch streams.
	// Centered on the middle of the rings.  128 x 128

	ELLIPSE
	{
		name = Outer Band

		position = 0, 0
		startColor = COLOR_MFD2_TEXT
		startWidth = 3
		vertexCount = 24
		radiusX = 64
		startAngle = 0
		endAngle = 270
	}
	ELLIPSE
	{
		name = Inner Band

		position = 0, 0
		startColor = COLOR_MFD2_TEXT
		startWidth = 3
		vertexCount = 24
		radiusX = 48
		startAngle = 0
		endAngle = 270
	}
	LINE_STRING
	{
		name = Band endcap 1

		position = 0, 0
		startColor = COLOR_MFD2_TEXT
		startWidth = 3
		vertex = 0, 48
		vertex = 0, 64
	}
	LINE_STRING
	{
		name = Band endcap 2

		position = 0, 0
		startColor = COLOR_MFD2_TEXT
		startWidth = 3
		vertex = 48, 0
		vertex = 64, 0
	}
}

MAS_SUB_PAGE
{
	name = 3/4 Gauge Altitude
	// Centered on the middle of the rings, 128 x 128.
	// Displays altitude relative to the top of the atmosphere.

	SUB_PAGE
	{
		name = 3/4 Circle Gauge
	}
	
	ELLIPSE
	{
		name = Altitude Ring

		position = 0, 0
		startColor = COLOR_MFD2_TEXT_HIGHLIGHT
		endColor = COLOR_MFD2_TEXT_DIMMED
		startWidth = 12
		vertexCount = 24
		radiusX = 56
		startAngle = 270 * fc.Max(0, (1 - fc.SafeDivide(fc.Altitude(), fc.AtmosphereTop())))
		endAngle = 270
	}
	IMAGE
	{
		texture = MOARdV/MFD/frameFill6ch112x48
		position = -56, -24
		passiveColor = COLOR_MFD2_TEXT
	}
	TEXT
	{
		position = -3, -0.5
		text = <=0,6:0.0=> $&$ fc.Min(9999.9, fc.Altitude() * 0.001)
		textColor = COLOR_MFD2_TEXT_HIGHLIGHT
	}
	TEXT
	{
		position = -3.5, 2
		text = Alt, km
	}
}

MAS_SUB_PAGE
{
	name = 3/4 Gauge Orbital Speed
	// Centered on the middle of the rings, 128 x 128.
	// Displays orbital speed relative to a circular orbit at the apoapsis.
	// This is mainly a decorative component to provide something resembling the SpaceX livestreams.

	SUB_PAGE
	{
		name = 3/4 Circle Gauge
	}

	ELLIPSE
	{
		name = Altitude Ring

		position = 0, 0
		startColor = COLOR_MFD2_TEXT_HIGHLIGHT
		endColor = COLOR_MFD2_TEXT_DIMMED
		startWidth = 12
		vertexCount = 24
		radiusX = 56
		startAngle = 270 * fc.Max(0, (1 - fc.SafeDivide(fc.OrbitSpeed(), fc.CircularOrbitSpeed(fc.Apoapsis()))))
		endAngle = 270
	}
	IMAGE
	{
		texture = MOARdV/MFD/frameFill6ch112x48
		position = -56, -24
		passiveColor = COLOR_MFD2_TEXT
	}
	TEXT
	{
		position = -3, -0.5
		text = <=0,6:0=> $&$ fc.Min(999999, fc.OrbitSpeed())
		textColor = COLOR_MFD2_TEXT_HIGHLIGHT
	}
	TEXT
	{
		position = -4, 2
		text = Obt. m/s
		//textColor = COLOR_MFD2_TEXT_HIGHLIGHT
	}
}

MAS_SUB_PAGE
{
	name = 3/4 Gauge Stage Propellant
	// Centered on the middle of the rings, 128 x 128.
	// Displays current stage propelleant.

	SUB_PAGE
	{
		name = 3/4 Circle Gauge
	}

	ELLIPSE
	{
		name = Data Display Band

		position = 0, 0
		startColor = COLOR_MFD2_TEXT_HIGHLIGHT
		endColor = COLOR_MFD2_TEXT_DIMMED
		startWidth = 12
		vertexCount = 24
		radiusX = 56
		startAngle = 270 * (1 - fc.PropellantStagePercent())
		endAngle = 270
	}
	IMAGE
	{
		texture = MOARdV/MFD/frameFill6ch112x48
		position = -56, -24
		passiveColor = COLOR_MFD2_TEXT
	}
	TEXT
	{
		position = -3, -0.5
		text = <=0,6:0=> $&$ fc.Min(999999, fc.PropellantStageCurrent())
		textColor = COLOR_MFD2_TEXT_HIGHLIGHT
	}
	TEXT
	{
		position = -3.5, 2
		text = Stg Fuel
	}
}

MAS_SUB_PAGE
{
	name = 3/4 Gauge Throttle
	// Centered on the middle of the rings, 128 x 128.
	// Displays throttle percentage.

	SUB_PAGE
	{
		name = 3/4 Circle Gauge
	}

	ELLIPSE
	{
		name = Data Display Band

		position = 0, 0
		startColor = COLOR_MFD2_TEXT_HIGHLIGHT
		endColor = COLOR_MFD2_TEXT_DIMMED
		startWidth = 12
		vertexCount = 24
		radiusX = 56
		startAngle = 270 * (1 - fc.GetThrottle())
		endAngle = 270
	}
	IMAGE
	{
		texture = MOARdV/MFD/frameFill6ch112x48
		position = -56, -24
		passiveColor = COLOR_MFD2_TEXT
	}
	TEXT
	{
		position = -2.5, -0.5
		text = <=0,5:P0=> $&$ fc.GetThrottle()
		textColor = COLOR_MFD2_TEXT_HIGHLIGHT
	}
	TEXT
	{
		position = -4, 2
		text = Throttle
	}
}

MAS_SUB_PAGE
{
	name = 3/4 Gauge Thrust
	// Centered on the middle of the rings, 128 x 128.
	// Displays current engine thrust relative to maximum thrust.

	SUB_PAGE
	{
		name = 3/4 Circle Gauge
	}

	ELLIPSE
	{
		name = Data Display Band

		position = 0, 0
		startColor = COLOR_MFD2_TEXT_HIGHLIGHT
		endColor = COLOR_MFD2_TEXT_DIMMED
		startWidth = 12
		vertexCount = 24
		radiusX = 56
		startAngle = 270 * (1 - fc.CurrentRatedThrust())
		endAngle = 270
	}
	IMAGE
	{
		texture = MOARdV/MFD/frameFill6ch112x48
		position = -56, -24
		passiveColor = COLOR_MFD2_TEXT
	}
	TEXT
	{
		position = -3, -0.5
		text = <=0,6:0.0=> $&$ fc.Min(9999.9, fc.CurrentThrustkN())
		textColor = COLOR_MFD2_TEXT_HIGHLIGHT
	}
	TEXT
	{
		position = -3.5, 2
		text = Thr, kN
	}
}
