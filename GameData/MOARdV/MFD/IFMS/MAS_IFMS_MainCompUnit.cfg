MAS_LUA
{
	name = MAS IFMS scripts

	script = MOARdV/MFD/IFMS/IFMS_Scripts.lua
}

PROP
{
	name = MAS_IFMS_MainCompUnit
	MODEL
	{
		model = ASET/ASET_Props/Misc/JSIMainCompUnit/JSIMainCompUnit
	}

	MODULE
	{
		name = MASComponent

		startupScript = IFMS_MCU_Init("%AUTOID%")

		//--- Decorative Elements
		COLOR_SHIFT
		{
			name = JSI Label backlight
			transform = pCube30
			passiveColor = 0, 0, 0, 255
			activeColor = 255,255,255,255
			blend = true
			variable = fc.Conditioned(fc.GetPersistentAsNumber("Backlight"))
		}
		// These are disabled because the emissive ON version looks terrible, and I don't want to edit
		// the texture, because then I need to patch it.
		COLOR_SHIFT
		{
			name = Unit A (MAS) Backlight
			transform = pCube4
			passiveColor = 0, 0, 0, 255
		}
		COLOR_SHIFT
		{
			name = Unit B (MechJeb) Backlight
			transform = pCube8
			passiveColor = 0, 0, 0, 255
		}

		COLOR_SHIFT
		{
			name = Master lamp
			transform = LED01Obj
			passiveColor = COLOR_MOARdV_IndicatorLampOff
			activeColor = COLOR_MOARdV_IndicatorLampGreen
			variable = fc.Conditioned(1 - fc.GetPersistentAsNumber("MAS_IFMS_Reset"))
		}
		COLOR_SHIFT
		{
			// Second green LED
			name = LED02Obj
			transform = LED02Obj
			passiveColor = COLOR_MOARdV_IndicatorLampOff
			activeColor = COLOR_MOARdV_IndicatorLampGreen
			variable = fc.Conditioned(mechjeb.AutopilotActive() + fc.GetPilotActive())
		}
		COLOR_SHIFT
		{
			// Third green LED
			name = LED03Obj
			transform = LED03Obj
			passiveColor = COLOR_MOARdV_IndicatorLampOff
			activeColor = COLOR_MOARdV_IndicatorLampGreen
			variable = fc.Conditioned(fc.CommNetSignalStrength() - fc.GetPersistentAsNumber("MAS_IFMS_Reset"))
		}
		COLOR_SHIFT
		{
			// Red LED
			name = LED04Obj
			transform = LED04Obj
			passiveColor = COLOR_MOARdV_IndicatorLampOff
			activeColor = COLOR_MOARdV_IndicatorLampRed
			variable = fc.Conditioned(fc.GetPersistentAsNumber("MAS_IFMS_Reset"))
		}
		COLOR_SHIFT
		{
			// First yellow LED
			name = LED05Obj
			transform = LED05Obj
			passiveColor = COLOR_MOARdV_IndicatorLampOff
			activeColor = 255,255,50,255
			variable = fc.Conditioned(1 - fc.GetPersistentAsNumber("MAS_IFMS_Reset"))
		}
		COLOR_SHIFT
		{
			// Second yellow LED
			name = LED06Obj
			transform = LED06Obj
			passiveColor = COLOR_MOARdV_IndicatorLampOff
			activeColor = 255,255,50,255
			variable = fc.Conditioned(mechjeb.Available() - fc.GetPersistentAsNumber("MAS_IFMS_Reset"))
		}
		COLOR_SHIFT
		{
			// LED next to the monitor
			name = LED07Obj
			transform = LED07Obj
			passiveColor = COLOR_MOARdV_IndicatorLampOff
			activeColor = 255,255,50,255
			variable = fc.Conditioned((fc.PeriodCount(0.5, 8) > 0) * (1 - fc.GetPersistentAsNumber("MAS_IFMS_Reset")))
		}

		TEXT_LABEL
		{
			name = Display Name
			transform = JSIDisplayNameObj
			fontSize = 3
			lineSpacing = 0.9
			font = InconsolataGo
			style = Bold
			alignment = Left
			anchor = UpperLeft
			emissive = always
			passiveColor = COLOR_ASET_SWITCHER_NAME_POSITIVECOLOR
			text = MAS IFMS Processor
		}
		TEXT_LABEL
		{
			name = Display Text 1
			transform = JSIDisplayTextObj
			fontSize = 2
			lineSpacing = 0.9
			font = InconsolataGo
			style = Bold
			alignment = Left
			anchor = UpperLeft
			emissive = always
			passiveColor = COLOR_ASET_SWITCHER_NAME_POSITIVECOLOR
			text = [#00ff00]FLIGHT CONTROL SYSTEM$$$ $$$[#ffff00] GPC01 [#ffffff]|[#ffff00] GPC02 [#ffffff]|[#ffff00] GPC03$$$[#00ff00]  RUN     RUN     RUN$$$ $$$[#ffffff]MDM#1:[#00ff00]OK  [#ffffff]MDM#2:[#00ff00]OK[#ffffff] Temp:[#00ff00]OK
		}
		TEXT_LABEL
		{
			name = Display Text 2
			transform = JSIDisplayTextObj02
			fontSize = 2
			lineSpacing = 0.9
			font = InconsolataGo
			style = Bold
			alignment = Left
			anchor = UpperLeft
			emissive = always
			passiveColor = COLOR_ASET_SWITCHER_NAME_POSITIVECOLOR
			text = [#ffffff]EXTENSIONS:[#00ff00] <=0=> <=1=>$&$ fc.Select(mechjeb.Available() > 0, "MJ ", ""); fc.Select(ke.Available() > 0, "KER ", "") $$$[#ffffff]PWR:[#00ff00]NOMINAL [#ffffff]   AC BUS:[#00ff00]<=0=>$&$ fc.Select(fc.GetPersistentAsNumber("IFMS_MechJeb_Select") == 0, "A", "B") $$$[#ffffff]IPL SOURCE:[#00ff00]1  [#ffffff] DK BUS:[#00ff00]<=0=>$&$ fc.Select(fc.GetPersistentAsNumber("IFMS_MechJeb_Select") == 0, "A", "B") $$$ $$$[#ffffff]MET:[#00ff00]<=0:METddd/hh:mm:ss=>$&$ fc.MET()
		}
		TEXT_LABEL
		{
			name = Display Text 3
			transform = JSIDisplayTextObj03
			fontSize = 2
			lineSpacing = 0.9
			font = InconsolataGo
			style = Bold
			alignment = Left
			anchor = UpperLeft
			emissive = always
			passiveColor = COLOR_ASET_SWITCHER_NAME_POSITIVECOLOR
			text = [#ffffff]UNIT A: [#00ff00]<=0=> $&$fc.Select(fc.GetPilotActive(), "ACTIVE", "STANDBY")$$$[#ffffff]UNIT B: <=0=> $&$ fc.Select(1 - mechjeb.Available() - mechjeb.ComputerActive(), "[#00ff00]ACTIVE", "[#00ff00]STANDBY", "[#7f7f7f]DISABLED")
		}

		TRANSLATION
		{
			name = Display Power
			transform = JSIDisplayObjLoc
			startTranslation = 0, 0, -0.015
			endTranslation = 0, 0, 0
			variable = fc.Conditioned(1 - fc.GetPersistentAsNumber("MAS_IFMS_Reset"))
		}

		//--- FDAI processing system
		TRIGGER_EVENT
		{
			name = IFMS FDAI Auto Pitch
			event = fc.SetPersistent("IFMS_FDAI_PitchError", fc.PitchSAS())
			autoRepeat = true
			variable = fc.GetPersistentAsNumber("IFMS_FDAI_Mode") == 0
		}
		TRIGGER_EVENT
		{
			name = IFMS FDAI Auto Yaw
			event = fc.SetPersistent("IFMS_FDAI_YawError", fc.YawSAS())
			autoRepeat = true
			variable = fc.GetPersistentAsNumber("IFMS_FDAI_Mode") == 0
		}

		TRIGGER_EVENT
		{
			name = IFMS FDAI SRF+ Pitch
			event = fc.SetPersistent("IFMS_FDAI_PitchError", fc.PitchSurfacePrograde())
			autoRepeat = true
			variable = fc.GetPersistentAsNumber("IFMS_FDAI_Mode") == 1
		}
		TRIGGER_EVENT
		{
			name = IFMS FDAI SRF+ Yaw
			event = fc.SetPersistent("IFMS_FDAI_YawError", fc.YawSurfacePrograde())
			autoRepeat = true
			variable = fc.GetPersistentAsNumber("IFMS_FDAI_Mode") == 1
		}

		TRIGGER_EVENT
		{
			name = IFMS FDAI SRF- Pitch
			event = fc.SetPersistent("IFMS_FDAI_PitchError", fc.PitchSurfaceRetrograde())
			autoRepeat = true
			variable = fc.GetPersistentAsNumber("IFMS_FDAI_Mode") == 2
		}
		TRIGGER_EVENT
		{
			name = IFMS FDAI SRF- Yaw
			event = fc.SetPersistent("IFMS_FDAI_YawError", fc.YawSurfaceRetrograde())
			autoRepeat = true
			variable = fc.GetPersistentAsNumber("IFMS_FDAI_Mode") == 2
		}

		TRIGGER_EVENT
		{
			name = IFMS FDAI OBT+ Pitch
			event = fc.SetPersistent("IFMS_FDAI_PitchError", fc.PitchPrograde())
			autoRepeat = true
			variable = fc.GetPersistentAsNumber("IFMS_FDAI_Mode") == 3
		}
		TRIGGER_EVENT
		{
			name = IFMS FDAI OBT+ Yaw
			event = fc.SetPersistent("IFMS_FDAI_YawError", fc.YawPrograde())
			autoRepeat = true
			variable = fc.GetPersistentAsNumber("IFMS_FDAI_Mode") == 3
		}

		TRIGGER_EVENT
		{
			name = IFMS FDAI OBT- Pitch
			event = fc.SetPersistent("IFMS_FDAI_PitchError", fc.PitchSurfaceRetrograde())
			autoRepeat = true
			variable = fc.GetPersistentAsNumber("IFMS_FDAI_Mode") == 4
		}
		TRIGGER_EVENT
		{
			name = IFMS FDAI OBT- Yaw
			event = fc.SetPersistent("IFMS_FDAI_YawError", fc.YawSurfaceRetrograde())
			autoRepeat = true
			variable = fc.GetPersistentAsNumber("IFMS_FDAI_Mode") == 4
		}

		TRIGGER_EVENT
		{
			name = IFMS FDAI Rad+ Pitch
			event = fc.SetPersistent("IFMS_FDAI_PitchError", fc.PitchRadialOut())
			autoRepeat = true
			variable = fc.GetPersistentAsNumber("IFMS_FDAI_Mode") == 5
		}
		TRIGGER_EVENT
		{
			name = IFMS FDAI Rad+ Yaw
			event = fc.SetPersistent("IFMS_FDAI_YawError", fc.YawRadialOut())
			autoRepeat = true
			variable = fc.GetPersistentAsNumber("IFMS_FDAI_Mode") == 5
		}

		TRIGGER_EVENT
		{
			name = IFMS FDAI Rad- Pitch
			event = fc.SetPersistent("IFMS_FDAI_PitchError", fc.PitchRadialIn())
			autoRepeat = true
			variable = fc.GetPersistentAsNumber("IFMS_FDAI_Mode") == 6
		}
		TRIGGER_EVENT
		{
			name = IFMS FDAI Rad- Yaw
			event = fc.SetPersistent("IFMS_FDAI_YawError", fc.YawRadialIn())
			autoRepeat = true
			variable = fc.GetPersistentAsNumber("IFMS_FDAI_Mode") == 6
		}

		TRIGGER_EVENT
		{
			name = IFMS FDAI Nml+ Pitch
			event = fc.SetPersistent("IFMS_FDAI_PitchError", fc.PitchNormal())
			autoRepeat = true
			variable = fc.GetPersistentAsNumber("IFMS_FDAI_Mode") == 7
		}
		TRIGGER_EVENT
		{
			name = IFMS FDAI Nml+ Yaw
			event = fc.SetPersistent("IFMS_FDAI_YawError", fc.YawNormal())
			autoRepeat = true
			variable = fc.GetPersistentAsNumber("IFMS_FDAI_Mode") == 7
		}

		TRIGGER_EVENT
		{
			name = IFMS FDAI Nml- Pitch
			event = fc.SetPersistent("IFMS_FDAI_PitchError", fc.PitchAntiNormal())
			autoRepeat = true
			variable = fc.GetPersistentAsNumber("IFMS_FDAI_Mode") == 8
		}
		TRIGGER_EVENT
		{
			name = IFMS FDAI Nml- Yaw
			event = fc.SetPersistent("IFMS_FDAI_YawError", fc.YawAntiNormal())
			autoRepeat = true
			variable = fc.GetPersistentAsNumber("IFMS_FDAI_Mode") == 8
		}

		TRIGGER_EVENT
		{
			name = IFMS FDAI NODE+ Pitch
			event = fc.SetPersistent("IFMS_FDAI_PitchError", fc.PitchManeuver())
			autoRepeat = true
			variable = fc.GetPersistentAsNumber("IFMS_FDAI_Mode") == 9
		}
		TRIGGER_EVENT
		{
			name = IFMS FDAI NODE+ Yaw
			event = fc.SetPersistent("IFMS_FDAI_YawError", fc.YawManeuver())
			autoRepeat = true
			variable = fc.GetPersistentAsNumber("IFMS_FDAI_Mode") == 9
		}

		TRIGGER_EVENT
		{
			name = IFMS FDAI TGT+ Pitch
			event = fc.SetPersistent("IFMS_FDAI_PitchError", fc.PitchTarget())
			autoRepeat = true
			variable = fc.GetPersistentAsNumber("IFMS_FDAI_Mode") == 10
		}
		TRIGGER_EVENT
		{
			name = IFMS FDAI TGT+ Yaw
			event = fc.SetPersistent("IFMS_FDAI_YawError", fc.YawTarget())
			autoRepeat = true
			variable = fc.GetPersistentAsNumber("IFMS_FDAI_Mode") == 10
		}

		TRIGGER_EVENT
		{
			name = IFMS FDAI R.Vel+ Pitch
			event = fc.SetPersistent("IFMS_FDAI_PitchError", fc.PitchTargetPrograde())
			autoRepeat = true
			variable = fc.GetPersistentAsNumber("IFMS_FDAI_Mode") == 11
		}
		TRIGGER_EVENT
		{
			name = IFMS FDAI R.Vel+ Yaw
			event = fc.SetPersistent("IFMS_FDAI_YawError", fc.YawTargetPrograde())
			autoRepeat = true
			variable = fc.GetPersistentAsNumber("IFMS_FDAI_Mode") == 11
		}

		TRIGGER_EVENT
		{
			name = IFMS FDAI R.Vel- Pitch
			event = fc.SetPersistent("IFMS_FDAI_PitchError", fc.PitchTargetRetrograde())
			autoRepeat = true
			variable = fc.GetPersistentAsNumber("IFMS_FDAI_Mode") == 12
		}
		TRIGGER_EVENT
		{
			name = IFMS FDAI R.Vel- Yaw
			event = fc.SetPersistent("IFMS_FDAI_YawError", fc.YawTargetRetrograde())
			autoRepeat = true
			variable = fc.GetPersistentAsNumber("IFMS_FDAI_Mode") == 12
		}

	}
}
