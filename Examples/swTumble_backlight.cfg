PROP
{
	name = MOARdV.AS_switchTumble_backlight
	MODEL
	{
		model = ASET/ASET_Props/Control/Switch_Tumble/SwitchTumble
	}

// This example props demonstrates a simple toggle switch used to control a
// persistent variable that in turn controls instrument backlight illumination.
//
// The functional block of non-MFD prop control:
	MODULE
	{
		name = MASComponent

// A "when you click here" event trigger.  Note that it supports onClick and
// onRelease - you can use only onRelease or only onClick, or you can use both
// for a momentary switch.  You may also add an autoRepeat component that will
// fire the onClick event every FixedUpdate while the button is held.  Audio
// may be added to the click and release events, as well.
//
// The fc.TogglePersistent command will toggle the specified persistent between
// 0 and 1.
//
// The 'name' field is used so if there is a configuration problem, the message in
// the error log is a little more helpful.
		COLLIDER_EVENT
		{
			name = Toggle switch
			collider = SwitchColider
			onClick = fc.TogglePersistent("Backlight")
			//onRelease =
			//clickSound = ASET/ASET_Props/Sounds/tumbleClick01
		}

// An interior lights event trigger.  The lights are switched on or off based
// on the variable listed here.  Since a range is not specified, MAS treats the
// variable as a "boolean", meaning that it is "off" if the value is zero or less,
// and it is "on" if the value is greater than 0.  We could specify a range for
// "on", but that involves extra computations that aren't needed for this simple
// variable.
		INT_LIGHT
		{
			name = Interior Lights
			lightName = Point light
			variable = fc.GetPersistent("Backlight")
			//range = 0.5, 1.5
		}

// We tie the switch animation to a variable, so when the player clicks the switch,
// we play the animation either forwards or backwards, depending on whether the
// variable is transitioning on or off.
		ANIMATION_PLAYER
		{
			name = swToggle
			animation = SwitchTumbleAnim
			animationSpeed = 1.0
			variable = fc.GetPersistent("Backlight")
		}

// For the sake of illustration, the audio for this switch is controlled here, not
// by the Collider Event.  Audio controlled by an Audio Player action may be set
// up in several modes: BOTH plays the audio once every time the controlling variable
// goes in or out of range.  ON and OFF play it once when it enters range or goes out
// of range.  LOOP loops the audio while it is in range.
		AUDIO_PLAYER
		{
			name = Clicker
			sound = ASET/ASET_Props/Sounds/tumbleClick01
			volume = 1.0
			trigger = BOTH
			//trigger = ON | OFF | BOTH | LOOP
			variable = fc.GetPersistent("Backlight")
			//range = 0.5, 1.5
		}

// Color Shift actions change a color in response to a variable.  These can be set
// up as thresholded behaviors, like below, where they're either "on" or "off",
// or they can be set up as a blended behavior if the variable has a range of
// values.
//
// The first action illustrates the use of a named color, a feature introduced in
// RPM that MAS is 100% compatible with.  The second action shows the use of a
// flashing Color Shift.
		COLOR_SHIFT
		{
			name = Glow Border
			transform = GlowBorder
			passiveColor = 0,0,0,255
			activeColor = COLOR_MOARdV_BacklightColor
			variable = fc.GetPersistent("Backlight")
		}
		COLOR_SHIFT
		{
			name = Tumbler Mark
			transform = TumblerMarkObj
			passiveColor = 0,0,0,255
			activeColor = 145,145,145,255
			variable = fc.GetPersistent("Backlight")
			flashRate = 0.25
		}

// Text Label is used to display text.  There are many configuration options
// available, primarily for tuning the placement and size of the text.
//
// All text in MAS uses the same rendering engine, so any font available for
// display on a text label may also be used on an MFD.  Bitmap fonts originally
// used in RPM may be imported to the MAS font engine, meaning they may also be
// used for text labels.
		TEXT_LABEL
		{
			name = Name Plate
			transform = TextTopObj
			fontSize = 7.5
			oneshot = true
			font = InconsolataGo-Bold
			alignment = Center
			anchor = MiddleCenter
			transformOffset = 0.0250, -0.008
			emissive = active
			variable = fc.GetPersistent("Backlight")
			activeColor = COLOR_MOARdV_BacklightColor
			passiveColor = COLOR_MOARdV_UnlitText
			text = PNL LIGHT
		}
	}
}
