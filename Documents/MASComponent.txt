The MASComponent module is the main functional block of Avionics Systems.  By itself, the MASComponent does nothing useful,
but it is composed of multiple MASAction objects, each of which is defined in the MASAction's config block.

All MASAction config blocks include a 'name' field.  This is an /optional/ field that can be used to name the block, so if
there is a configuration error, the output log will contain a name to help identify the problem.  It can potentially allow
Module Manager scripts to edit the config, as well.  You are not required to include a name.

Setup:

MODULE
{
  name = MASComponent
  // one or more MASAction actions as described below
}

Modes:

Many of the MASAction objects may operate in several modes.

Static Mode: Static mode does not use a variable.  It is used to make a one-time change to a value at initialization,
which is useful for techniques such as texture atlasing and color shifting.
Only the following actions support Static Mode: COLOR_SHIFT, TEXTURE_SHIFT.

Boolean Mode: In boolean mode, the variable is assumed to be either true or false.  Since all variables in MAS are
a number or string, this means that strings are always treated as 'false'. Numbers are treated as 'true' if
they are greater than 0 and 'false' if they are equal to or less than zero.  This mode is good for simple animated
switches and actions (illuminating backlights, for instance).

Threshold Mode: In threshold mode, the variable is treated as 'true' when its value falls between the two values
specified in 'range', and it is treated as 'false' when it is not between those values.  The order of the values in
'range' does not matter, and either or both value can be a constant number or a Lua script. Eg, to test if an orbit
will aerobrake, but doesn't yet hit the surface, the range would be '0, fc.GetCurrentBodyAtmTop()'.

Blend Mode: In blend mode, the variable is linearly interpolated between the two values in 'range', with a result ranging
from 0 to 1 depending on how close to either variable it is.  The order of the range matters in this case,
since the blended variable will be 0 if it is equal to the first range value, and 1 if it equals the second.
Only the following actions support Blend Mode: COLOR_SHIFT, TEXTURE_SHIFT.

There are many MASAction objects:


ANIMATION_PLAYER

This action plays an animation in response to the state of a variable.  It also provides control of the animation playback
speed.  It can operate in Boolean Mode and Threshold Mode.

ANIMATION_PLAYER
{
    name = swToggle
    animation = SwitchTumbleAnim
    speed = 1.0
    variable = fc.GetRCS()
    //range = 0.5,1.5
}

'name': Optional.  Default '(anonymous)'.  A name for the action.
'animation': Required.  The name of the animation that is triggered by the variable changing.
'speed': Optional.  Default 1.0.  Used to adjust animation playback rate.
'variable': Required.  The name of the variable script to evaluate.
'range': Optional.  When present, the Animation Player operates in Threshold Mode.  When absent, the player operates
in Boolean Mode.


COLLIDER_EVENT

A Collider Event action is used to respond to button presses and releases.

COLLIDER_EVENT
{
    name = Toggle switch
    collider = SwitchColider
    onClick = fc.ToggleRCS()
    //onRelease = fc.ToggleRCS()
	//autoRepeat = true
}

'name': Optional.  Default '(anonymous)'.  A name for the action.
'transform': Required.  The transform in the prop that contains a collider.
'onClick', 'onRelease': One or the other is required; both may be present.  A Lua Action to trigger when the prop's
transform is clicked or released.  If both are present, the switch may be used for momentary events.
'autoRepeat': Optional.  Default 'false'.  When set to true, the onClick event
triggers every FixedUpdate until the button is released.  It is possible to use autoRepeat, onClick, and onRelease
in the same Collider Event.


COLOR_SHIFT

A Color Shift action is used to change the color of part of the prop in response to a controlling variable.  Like
an animation player, this control can be used in Boolean Mode or Threshold Mode.  However,
unlike the animation player, the Color Shift can be configured to blend between the two colors using
Blend Mode, and it supports Static Mode.  In this case, the value is interpolated between the first and second
values of the range, and the resulting value is used to blend between the two color settings.

COLOR_SHIFT
{
    name = Glow Border
    transform = GlowBorder
    passiveColor = 0,0,0,255
    activeColor = COLOR_MOARdV_BacklightColor
    variable = fc.GetRCS()
	//range = 0.5, 1.5
	//blend = true
	//flashRate = 0.5
}

'name': Optional.  Default '(anonymous)'.  A name for the action.
'transform': Required.  The name of the transform whose color is going to be shifted.
'passiveColor': Required.  The RGBA quadruplet or RasterPropMonitor-compatible Named Color
to use when the variable is out of bounds.
'activeColor': Required.  The RGBA quadruplet or RasterPropMonitor-compatible Named Color
to use when the variable is in bounds.
'variable': Required.  The name of the variable script to evaluate.
'range': Optional.  When present, the Color Shift operates in threshold mode.  When absent, the shift is done
in boolean mode.
'blend': Optional. Default false.  Ignored if 'range' is not present.  When true, the color is linearly
interpolated between passiveColor and activeColor based on where in the range the variable falls.
'flashRate': Optional.  Default 0.0.  Ignored if 'blend' is enabled.  Specifies one-half of the duty
cycle for a blinking light (in other words, a flashRate of 0.5 means the light is on 0.5 seconds, and then
off for 0.5 seconds).

An alternate mode for COLOR_SHIFT is a one-time color change.  If 'variable' is omitted, the 'passiveColor'
is applied one time at startup, but the component has no further effect.  This is useful for changing the
color of a component without needing it to change in the future (such as re-tinting a prop).  When used for
this mode, do not include any optional parameters ('range', 'blend', 'flashRate') or configuration errors
may occur.


INT_LIGHT

This action is used to control interior lights.

INT_LIGHT
{
    name = Mk1 Cockpit
	transform = Point light
	variable = fc.GetPersistent("Interior Lights")
	//range = 0.5, 1.5
}

'name': Optional.  Default '(anonymous)'.  A name for the action.
'transform': Required.  The name of the transforms that contain lights.
'variable': Required.  The name of the variable script to evaluate.
'range': Optional.  When present, the Int Light operates in threshold mode.  When absent, it operates
in boolean mode.


TEXTURE_SHIFT

This action is used to shift the texture coordinates attached to a specified
Transform in the prop object.

TEXTURE_SHIFT
{
    name = Arrow
    transform = LabelObj
    startUV = 0.5, 0.6
	//endUV = 1.0, 0.6
    layers = _MainTex _Emissive
	//variable = fc.GetPersistent("Interior Lights")
	//range = 0.5, 1.5
	//blend = true
}

'name': Optional.  Default '(anonymous)'.  A name for the action.
'transform': Required.  The transform in the prop where you want to shift the texture.
'startUV': Required.  The (u,v) displacement for the texture when the variable is out of range.
'endUV': Required.  The (u,v) displacement for the texture when the variable is in range.
'layers': Optional.  Default '_MainTex'.  A space-delimited list of layers where the texture shift should be applied.
Known valid options are '_MainTex' and '_Emissive'.
'variable': Required.  The name of the variable script to evaluate.
'range': Optional.  When present, the Texture Shift operates in Threshold Mode.  When absent, it operates
in Boolean Mode.
'blend': Optional. Default false.  Ignored if 'range' is not present.  When true, the texture is linearly
interpolated between startUV and endUV based on where in the range the variable falls.

Texture Shift has an alternate Static Mode where it can be used to apply a one-time change to a texture.  This mode
is useful for texture atlases.  Omitting 'variable', and not included 'range' or 'blend' will activate this mode.
When active, 'startUV' is applied to the texture at startup, but the action has no further affect.  The sample above
demonstrates this static mode


TRIGGER_EVENT

This action is used to activate an event when a specified variable is true (Boolean Mode) or
in range (Threshold Mode).  The event may be configured as a repeated event by setting 'autoRepeat' to true,
which will fire the event every FixedUpdate until the variable is no longer in range.

Use caution with a Trigger Event: if there are multiple occurrences in a single craft, every single
trigger event will fire, unless the script it runs was designed to "know" if it's being called multiple
times per update.

TRIGGER_EVENT
{
    name = My Cool Action
	event = MyCoolAction()
	variable = fc.GetPersistent("Interior Lights")
	//range = 0.5, 1.5
	//autoRepeat = true
}

'name': Optional.  Default '(anonymous)'.  A name for the action.
'event': Required.  The event that is triggered when the trigger event is active.
'variable': Required.  The name of the variable script to evaluate.
'range': Optional.  When present, the Trigger Event operates in threshold mode.  When absent, it operates
in boolean mode.
'autoRepeat': Optional.  Default 'false'.  When set to true, the onClick event
triggers every FixedUpdate until the button is released.
