The Rosetta Stone: Translating from RPM variables to MAS variables.  Below is a list of
most of the variables in RasterPropMonitor, along with the MAS equivalent.  I'm using this
as a master list of how much work I still need to do, although it doubles as a handy
translation guide for anyone else who needs it.

Incomplete variables (to-do list): 59 variables
"ACCELNORMAL":
"ACCELPROGRADE":
"ACCELRADIAL":
"ACCELSURFPROGRADE":
"AGMEMO":
"BESTSPEEDATIMPACT":
"BIOMEID":
"BIOMENAME":
"CURRENTINTAKEAIRFLOW":
"EFFECTIVERAWTHROTTLE":
"EFFECTIVETHROTTLE":
"ENCOUNTERBODY":
"FUNDS":
"HEATSHIELDTEMPERATURE":
"HEATSHIELDTEMPERATUREKELVIN":
"HOTTESTPARTMAXTEMP":
"HOTTESTPARTNAME":
"HOTTESTPARTTEMP":
"HOTTESTPARTTEMPRATIO":
"HOVERPOINT":
"HOVERPOINTEXISTS":
"LATERALBRAKEDISTANCE":
"MASSPROPELLANT":
"MASSPROPELLANTSTAGE":
"MASSRESOURCES":
"MAXACCEL":
"PERIODRANDOM":
"PLUGIN":
"PODMAXSKINTEMPERATURE":
"PODMAXSKINTEMPERATUREKELVIN":
"PODMAXTEMPERATURE":
"PODMAXTEMPERATUREKELVIN":
"PODSKINTEMPERATURE":
"PODSKINTEMPERATUREKELVIN":
"PREDICTEDLANDINGERROR":
"REPUTATION":
"SCIENCECOUNT":
"SCIENCEDATA":
"SPEEDATIMPACT":
"SUICIDEBURNSTARTSECS":
"TARGETANGLEX":
"TARGETANGLEY":
"TARGETANGLEZ":
"TARGETGROUNDDISTANCE":
"TARGETLASTOBSERVEDTIMESECS":
"TARGETLASTOBSERVEDTIMEUT":
"TARGETLAUNCHTIMESECS":
"TARGETORBITALVEL":
"TARGETORBITBODY":
"TARGETORBPERIODSECS":
"TARGETPLANELAUNCHTIMESECS":
"TARGETSEMIMAJORAXIS":
"TARGETSIGNALSTRENGTH":
"TARGETSIGNALSTRENGTHCAPTION":
"TARGETSITUATION":
"TARGETSIZECLASS":
"TERMINALVELOCITY":
"TERRAINDELTA":
"TIMETOIMPACTSECS":


List of all variables defined in RPMCEvaluators.cs with MAS equivalents:

"ACCEL": fc.AccelEngines()
"ACCELFORWARD": fc.AccelForward()
"ACCELNORMAL":
"ACCELPROGRADE":
"ACCELRADIAL":
"ACCELRIGHT": fc.AccelRight()
"ACCELSURFPROGRADE":
"ACCELTOP": fc.AccelTop()
"ACTIVEENGINECOUNT": fc.EngineCount()
"AGMEMO":
"AGSTATE": fc.GetActionGroup(groupID)
"ALTITUDE": fc.Altitude()
"ALTITUDEALARM": -replaced with Lua scripting-
"ALTITUDEBOTTOM": fc.AltitudeBottom()
"ALTITUDEBOTTOMLOG10": fc.PseudoLog10(fc.AltitudeBottom())
"ALTITUDELOG10": fc.PseudoLog10(fc.Altitude())
"AMBIENTTEMPERATURE": fc.AmbientTemperature(false)
"AMBIENTTEMPERATUREKELVIN": fc.AmbientTemperature(true)
"ANGLEOFATTACK": fc.AngleOfAttack()
"APOAPSIS": fc.Apoapsis()
"APPROACHSPEED": fc.ApproachSpeed()
"ATMDENSITY": fc.AtmosphericDensity()
"ATMOSPHEREDEPTH": fc.AtmosphereDepth()
"ATMPRESSURE": fc.StaticPressureAtm() or fc.StaticPressureKPa()
"BESTSPEEDATIMPACT":
"BIOMEID":
"BIOMENAME":
"BRAKES": fc.GetBrakes()
"CURRENTENGINEFUELFLOW": fc.CurrentFuelFlow()
"CURRENTINTAKEAIRFLOW":
"CUSTOM": -replaced with Lua scripting-
"DELTAV": fc.DeltaV()
"DELTAVSTAGE": fc.DeltaVStage()
"DISTTOATMOSPHERETOP": fc.AtmosphereTop() - fc.Altitude()
"DOCKINGANGLEALARM": -replaced with Lua scripting-
"DOCKINGSPEEDALARM": -replaced with Lua scripting-
"DRAG": fc.Drag()
"DRAGACCEL": fc.DragAccel()
"DYNAMICPRESSURE": fc.DynamicPressure()
"EASPEED": fc.EquivalentAirspeed()
"ECCENTRICITY": fc.Eccentricity()
"EFFECTIVEACCEL": fc.Acceleration()
"EFFECTIVERAWTHROTTLE":
"EFFECTIVETHROTTLE":
"ELECOUTPUTALTERNATOR": fc.AlternatorOutput()
"ELECOUTPUTFUELCELL": fc.FuelCellOutput()
"ELECOUTPUTGENERATOR": fc.GeneratorOutput()
"ELECOUTPUTSOLAR": fc.SolarPanelOutput()
"ENCOUNTERBODY":
"ENCOUNTEREXISTS": fc.NextSoI()
"ENCOUNTERTIME": fc.TimeToSoI()
"ENGINECOUNT": fc.EngineCountTotal()
"ENGINEFLAMEOUTALARM": fc.EngineFlameout()
"ENGINEOVERHEATALARM": -replaced with Lua scripting-
"EXTERNALTEMPERATURE": fc.ExternalTemperature(false)
"EXTERNALTEMPERATUREKELVIN": fc.ExternalTemperature(true)
"FLIGHTUIMODE": -no replacement-
"FUNDS":
"GEAR": fc.GetGear()
"GEARALARM": -replaced with Lua scripting-
"GFORCE": fc.GForce()
"GROUNDPROXIMITYALARM": -replaced with Lua scripting-
"HEADING": fc.Heading()
"HEATSHIELDTEMPERATURE":
"HEATSHIELDTEMPERATUREFLUX": -no replacement-
"HEATSHIELDTEMPERATUREKELVIN":
"HORZVELOCITY": fc.HorizontalSpeed()
"HORZVELOCITYFORWARD": fc.SurfaceForwardSpeed()
"HORZVELOCITYRIGHT": fc.SurfaceLateralSpeed()
"HOTTESTENGINEMAXTEMP": fc.HottestEngineTemperatureMax(true)
"HOTTESTENGINETEMP": fc.HottestEngineTemperature(true)
"HOTTESTENGINETEMPRATIO": fc.HottestEngineTemperature(true) / fc.HottestEngineTemperature(true)
"HOTTESTPARTMAXTEMP":
"HOTTESTPARTNAME":
"HOTTESTPARTTEMP":
"HOTTESTPARTTEMPRATIO":
"HOVERPOINT":
"HOVERPOINTEXISTS":
"IASPEED": fc.IndicatedAirspeed()
"IMPACTALARM": -replaced with Lua scripting-
"INCLINATION": fc.Inclination()
"ISCLAWREFERENCE": fc.ReferenceTransformType() == 4
"ISDOCKINGPORTREFERENCE": fc.ReferenceTransformType() == 3
"ISLOADED": fc.AssemblyLoaded()
"ISONKERBINTIME": fc.KerbinTime()
"ISREMOTEREFERENCE": fc.ReferenceTransformType() == 2
"LATERALBRAKEDISTANCE":
"LATITUDE": fc.Latitude()
"LATITUDETGT": fc.TargetLatitude()
"LIFT": fc.Lift()
"LIFTACCEL": -no replacement-
"LIGHTS": fc.GetLights()
"LONGITUDE": fc.Longitude()
"LONGITUDETGT": fc.TargetLongitude()
"MAPPED": -replaced with Lua scripting-
"MASSDRY": fc.Mass(false)
"MASSPROPELLANT":
"MASSPROPELLANTSTAGE":
"MASSRESOURCES":
"MASSWET": fc.Mass(true)
"MATH": -replaced with Lua scripting-
"MAXACCEL":
"MAXENGINEFUELFLOW": fc.MaxFuelFlow()
"MAXISP": fc.MaxIsp()
"MECHJEBAVAILABLE": mechjeb.Available()
"METSECS": fc.MET()
"MNODEAPOAPSIS": fc.ManeuverNodeAp()
"MNODEBURNTIMESECS": fc.ManeuverNodeBurnTime()
"MNODEDV": fc.ManeuverNodeDV()
"MNODEDVNORMAL": fc.ManeuverNodeDVNormal()
"MNODEDVPROGRADE": fc.ManeuverNodeDVPrograde()
"MNODEDVRADIAL": fc.ManeuverNodeDVRadial()
"MNODEECCENTRICITY": fc.ManeuverNodeEcc()
"MNODEEXISTS": fc.ManeuverNodeExists()
"MNODEINCLINATION": fc.ManeuverNodeInc()
"MNODEPERIAPSIS": fc.ManeuverNodePe()
"MNODERELATIVEINCLINATION": fc.ManeuverNodeRelativeInclination()
"MNODETARGETCLOSESTAPPROACHDISTANCE": fc.ManeuverNodeTargetClosestApproachDistance()
"MNODETARGETCLOSESTAPPROACHTIME": fc.ManeuverNodeTargetClosestApproachTime()
"MNODETIMESECS": fc.ManeuverNodeTime()
"NAME": fc.VesselName()
"NEXTAPSIS": -replaced with Lua scripting-
"NEXTAPSISTYPE": -replaced with Lua scripting-
"ORBITBODY": fc.BodyName(-1)
"ORBITBODYAREA": fc.BodyArea(-1)
"ORBITBODYATMOSPHERE": fc.HasAtmosphere() -or- fc.BodyHasAtmosphere(-1)
"ORBITBODYATMOSPHERETOP": fc.AtmosphereTop() -or- fc.BodyAtmosphereTop(-1)
"ORBITBODYESCAPEVEL": fc.BodyEscapeVelocity(-1)
"ORBITBODYGEEASL": fc.BodyGeeASL(-1)
"ORBITBODYGM": fc.BodyGM(-1)
"ORBITBODYINDEX": fc.BodyIndex(-1)
"ORBITBODYMASS": fc.BodyMass(-1)
"ORBITBODYOXYGEN": fc.BodyHasOxygen(-1)
"ORBITBODYRADIUS": fc.BodyRadius(-1)
"ORBITBODYROTATIONPERIOD": fc.BodyRotationPeriod(-1)
"ORBITBODYSCALEHEIGHT": fc.BodyAtmosphereTop(-1)
"ORBITBODYSOI": fc.BodySoI(-1)
"ORBITBODYSURFACETEMP": fc.BodySurfaceTemp(-1, false)
"ORBITBODYSURFACETEMPKELVIN": fc.BodySurfaceTemp(-1, true)
"ORBITBODYSYNCORBITALTITUDE": fc.BodySyncOrbitSMA(-1) - fc.BodyRadius(-1)
"ORBITBODYSYNCORBITCIRCUMFERENCE": fc.BodySyncOrbitSMA(-1)
"ORBITBODYSYNCORBITVELOCITY": fc.BodySyncOrbitVelocity(-1)
"ORBITMAKESSENSE": fc.VesselFlying()
"ORBPERIODSECS": fc.OrbitPeriod()
"ORBTSPEED": fc.OrbitSpeed()
"PERIAPSIS": fc.Periapsis()
"PERIOD": fc.Period(period)
"PERIODRANDOM":
"PERSISTENT": fc.GetPersistent() or fc.GetPersistentAsNumber()
"PITCH": fc.Pitch()
"PITCHNODE": fc.PitchManeuver()
"PITCHNORMALMINUS": fc.PitchAntiNormal()
"PITCHNORMALPLUS": fc.PitchNormal()
"PITCHPROGRADE": fc.PitchPrograde()
"PITCHRADIALIN": fc.PitchRadialIn()
"PITCHRADIALOUT": fc.PitchRadialOut()
"PITCHRATE": fc.PitchRate()
"PITCHRETROGRADE": fc.PitchRetrograde()
"PITCHSURFPROGRADE": fc.PitchSurfacePrograde()
"PITCHSURFRETROGRADE": fc.PitchSurfaceRetrograde()
"PITCHTARGET": fc.PitchTarget()
"PITCHTARGETRELMINUS": fc.PitchTargetPrograde()
"PITCHTARGETRELPLUS": fc.PitchTargetRetrograde()
"PLUGIN":
"PODMAXSKINTEMPERATURE":
"PODMAXSKINTEMPERATUREKELVIN":
"PODMAXTEMPERATURE":
"PODMAXTEMPERATUREKELVIN":
"PODNETFLUX": -no replacement-
"PODSKINTEMPERATURE":
"PODSKINTEMPERATUREKELVIN":
"PODTEMPERATURE": fc.InternalTemperature(false)
"PODTEMPERATUREALARM": -no replacement-
"PODTEMPERATUREKELVIN": fc.InternalTemperature(true)
"PRECISIONCONTROL": fc.GetPrecisionMode()
"PREDICTEDLANDINGALTITUDE": fc.LandingAltitude()
"PREDICTEDLANDINGERROR":
"PREDICTEDLANDINGLATITUDE": fc.LandingLatitude()
"PREDICTEDLANDINGLONGITUDE": fc.LandingLongitude()
"RADARALT": fc.AltitudeTerrain(false)
"RADARALTLOG10": fc.PseudoLog10(fc.AltitudeTerrain(false))
"RADARALTOCEAN": fc.AltitudeTerrain(true)
"RADARALTOCEANLOG10": fc.PseudoLog10(fc.AltitudeTerrain(true))
"RADARALTVERTSPEED": fc.AltitudeTerrainRate()
"RANDOM": fc.Random()
"RANDOMNORMAL": fc.RandomNormal(mean, stdDev)
"RCS": fc.GetRCS()
"REALISP": fc.CurrentIsp()
"RELATIVEINCLINATION": fc.TargetRelativeInclination()
"REPUTATION":
"ROLL": fc.Roll()
"ROLLRATE": fc.RollRate()
"RPMVERSION": -no replacement-
"SAS": fc.GetSAS()
"SASMODEMANEUVER": fc.GetSASMode() == 9
"SASMODENORMAL": fc.GetSASMode() == 3 or fc.GetSASMode() == 4
"SASMODEPROGRADE": fc.GetSASMode() == 1 or fc.GetSASMode() == 2
"SASMODERADIAL": fc.GetSASMode() == 5 or fc.GetSASMode() == 6
"SASMODESTABILITY": fc.GetSASMode() == 0
"SASMODETARGET": fc.GetSASMode() == y or fc.GetSASMode() == 8
"SCIENCECOUNT":
"SCIENCEDATA":
"SELECT": -replaced with Lua scripting-
"SELECTEDSPEED": fc.SpeedDisplayMode()
"SEMIMAJORAXIS": fc.SemiMajorAxis()
"SIDESLIP": fc.Sideslip()
"SITUATION": fc.VesselSituation() returns a number instead of a string
"SLOPEALARM": -replaced with Lua scripting-
"SLOPEANGLE": fc.SlopeAngle()
"SPEEDATIMPACT":
"SPEEDDISPLAYMODE": fc.SpeedDisplayMode()
"STAGE": fc.CurrentStage()
"STAGEREADY": fc.StageReady()
"STICKPITCH": fc.StickPitch()
"STICKPITCHTRIM": fc.StickTrimPitch()
"STICKRCSX": fc.StickTranslationX()
"STICKRCSY": fc.StickTranslationY()
"STICKRCSZ": fc.StickTranslationZ()
"STICKROLL": fc.StickRoll()
"STICKROLLTRIM": fc.StickTrimRoll()
"STICKYAW": fc.StickYaw()
"STICKYAWTRIM": fc.StickTrimYaw()
"STOREDSTRING": -replaced with initialized persistent variables-
"SUICIDEBURNSTARTSECS":
"SURFSPEED": fc.SurfaceSpeed()
"SURFSPEEDMACH": fc.MachNumber()
"TARGETALTITUDE": fc.TargetAltitude()
"TARGETANGLEDEV": fc.TargetAngle()
"TARGETANGLEX":
"TARGETANGLEY":
"TARGETANGLEZ":
"TARGETAPOAPSIS": fc.TargetApoapsis()
"TARGETBODYAREA": fc.BodyArea(-2)
"TARGETBODYATMOSPHERE": fc.BodyHasAtmosphere(-2)
"TARGETBODYATMOSPHERETOP": fc.BodyAtmosphereTop(-2)
"TARGETBODYCLOSESTAPPROACH": fc.TargetClosestApproachDistance()
"TARGETBODYDELTAV": fc.TransferDeltaV()
"TARGETBODYEJECTIONALTITUDE":
"TARGETBODYEJECTIONANGLE": transfer.RelativeEjectionAngle()
"TARGETBODYEJECTIONANGLESECS": transfer.TimeUntilEjection()
"TARGETBODYESCAPEVEL": fc.BodyEscapeVelocity(-2)
"TARGETBODYGEEASL": fc.BodyGeeASL(-2)
"TARGETBODYGM": fc.BodyGM(-2)
"TARGETBODYINDEX": fc.BodyIndex(-2)
"TARGETBODYMASS": fc.BodyMass(-2)
"TARGETBODYMOONEJECTIONANGLE": transfer.RelativeEjectionAngle()
"TARGETBODYOXYGEN": fc.BodyHasOxygen(-2)
"TARGETBODYPHASEANGLE": transfer.RelativePhaseAngle()
"TARGETBODYPHASEANGLESECS": transfer.TimeUntilPhaseAngle()
"TARGETBODYRADIUS": fc.BodyRadius(-2)
"TARGETBODYROTATIONPERIOD": fc.BodyRotationPeriod(-2)
"TARGETBODYSCALEHEIGHT": fc.BodyAtmosphereTop(-2)
"TARGETBODYSOI": fc.BodySoI(-2)
"TARGETBODYSURFACETEMP": fc.BodySurfaceTemp(-2, false)
"TARGETBODYSURFACETEMPKELVIN": fc.BodySurfaceTemp(-2, true)
"TARGETBODYSYNCORBICIRCUMFERENCE": fc.BodySyncOrbitSMA(-2)
"TARGETBODYSYNCORBITALTITUDE": fc.BodySyncOrbitSMA(-2) - fc.BodyRadius(-2)
"TARGETBODYSYNCORBITVELOCITY": fc.BodySyncOrbitVelocity(-2)
"TARGETCLOSESTAPPROACHDISTANCE": fc.TargetClosestApproachDistance()
"TARGETCLOSESTAPPROACHTIME": fc.TargetClosestApproachTime()
"TARGETDISTANCE": fc.TargetDistance()
"TARGETDISTANCESCALEDX": -no replacement-
"TARGETDISTANCESCALEDY": -no replacement-
"TARGETDISTANCEX": fc.TargetDistanceX()
"TARGETDISTANCEY": fc.TargetDistanceY()
"TARGETDISTANCEZ": fc.TargetDistanceZ()
"TARGETECCENTRICITY": fc.TargetEccentricity()
"TARGETEXISTS": fc.TargetType() > 0
"TARGETGROUNDDISTANCE":
"TARGETINCLINATION": fc.TargetInclination()
"TARGETISCELESTIAL": fc.TargetType() == 3
"TARGETISDOCKINGPORT": fc.TargetType() == 2
"TARGETISPOSITION": fc.TargetType() == 4
"TARGETISVESSELORPORT": fc.TargetIsVessel()
"TARGETLASTOBSERVEDTIMESECS":
"TARGETLASTOBSERVEDTIMEUT":
"TARGETLATITUDE": fc.TargetLatitude()
"TARGETLAUNCHTIMESECS":
"TARGETLONGITUDE": fc.TargetLongitude()
"TARGETNAME": fc.TargetName()
"TARGETORBITALVEL":
"TARGETORBITBODY":
"TARGETORBPERIODSECS":
"TARGETPERIAPSIS": fc.TargetPeriapsis()
"TARGETPLANELAUNCHTIMESECS":
"TARGETSAMESOI": fc.TargetSameSoI()
"TARGETSEMIMAJORAXIS":
"TARGETSIGNALSTRENGTH":
"TARGETSIGNALSTRENGTHCAPTION":
"TARGETSITUATION":
"TARGETSIZECLASS":
"TARGETTIMETOAPSECS": fc.TargetTimeToAp()
"TARGETTIMETOPESECS": fc.TargetTimeToPe()
"TARGETTYPE": fc.TargetType(), although TargetType returns a number, not a string
"TERMINALVELOCITY":
"TERRAINDELTA":
"TERRAINHEIGHT": fc.TerrainHeight()
"TERRAINHEIGHTLOG10": fc.PseudoLog10(fc.TerrainHeight())
"TGTRELX": fc.TargetVelocityX()
"TGTRELY": fc.TargetVelocityY()
"TGTRELZ": fc.TargetVelocityZ()
"THROTTLE": fc.GetThrottle()
"THRUST": fc.CurrentThrustkN()
"THRUSTLIMIT": fc.GetThrottleLimit()
"THRUSTMAX": fc.MaxThrustkN(true)
"THRUSTMAXRAW": fc.MaxThrustkN(false)
"TIMEOFDAYSECS": fc.TimeOfDay(fc.UT())
"TIMESINCELASTAP": fc.TimeToAp() - fc.OrbitPeriod()
"TIMESINCELASTPE": fc.TimeToPe() - fc.OrbitPeriod()
"TIMETOANEQUATORIAL": fc.TimeToANEq()
"TIMETOANWITHTARGETSECS": fc.TimeToANTarget()
"TIMETOAPSECS": fc.TimeToAp()
"TIMETOATMOSPHERESECS": fc.TimeToAtmosphere()
"TIMETODNEQUATORIAL": fc.TimeToDNEq()
"TIMETODNWITHTARGETSECS": fc.TimeToDNTarget()
"TIMETOIMPACTSECS":
"TIMETONEXTAPSIS": math.min(fc.TimeToAp(), fc.TimeToPe())
"TIMETOPESECS": fc.TimeToPe()
"TIMEWARPACTIVE": fc.WarpRate() > 1
"TIMEWARPCURRENT": fc.WarpRate()
"TIMEWARPNONPHYSICS": -no replacement-
"TIMEWARPPHYSICS": -no replacement-
"TRGTSPEED": fc.TargetSpeed()
"TUMBLEALARM": -replaced with Lua scripting-
"TWR": fc.CurrentTWR()
"TWRMAX": fc.MaxTWR()
"UTSECS": fc.UT()
"VERTSPEED": fc.VerticalSpeed()
"VERTSPEEDLOG10": fc.PseudoLog10{fc.VerticalSpeed()}
"VERTSPEEDROUNDED": -replaced with Lua scripting-
"VESSELTYPE": fc.VesselType()
"YAWNODE": fc.YawManeuver()
"YAWNORMALMINUS": fc.YawAntiNormal()
"YAWNORMALPLUS": fc.YawNormal()
"YAWPROGRADE": fc.YawPrograde()
"YAWRADIALIN": fc.YawRadialIn()
"YAWRADIALOUT": fc.YawRadialOut()
"YAWRATE": fc.YawRate()
"YAWRETROGRADE": fc.YawRetrograde()
"YAWSURFPROGRADE": fc.YawSurfacePrograde()
"YAWSURFRETROGRADE": fc.YawSurfaceRetrograde()
"YAWTARGET": fc.YawTarget()
"YAWTARGETRELMINUS": fc.YawTargetPrograde()
"YAWTARGETRELPLUS": fc.YawTargetRetrograde()

Crew:
"CREW": use 'false' as the first parameter below
"CREWLOCAL": use 'true' as the first parameter below
seatNumber starts counting at 0, not 1.

"BADASS": fc.CrewBadS(true/false, seatNumber)
"COURAGE": fc.CrewCourage(true/false, seatNumber)
"EXISTS": fc.SeatExists(true/false, seatNumber)
"EXPERIENCE": fc.CrewExperience(true/false, seatNumber)
"FIRST": - not yet-
"FULL": fc.CrewName(true/false, seatNumber)
"LAST": - not yet-
"LEVEL": fc.CrewLevel(true/false, seatNumber)
"PANIC": fc.CrewPanic(true/false, seatNumber)
"PRESENT": fc.SeatOccupied(true/false, seatNumber)
"STUPIDITY": fc.CrewStupidity(true/false, seatNumber)
"TITLE": fc.CrewTitle(true/false, seatNumber)
"WHEE": fc.CrewWhee(true/false, seatNumber)

Resources:
"LISTR": Resource method names taking a double (number) parameter
"SYSR": Resource method names taking a string (text) parameter


JSIInternalRPMButtons:


FAR:
"FARPM_DYNAMIC_PRESSURE_Q": far.DynamicPressure() or fc.DynamicPressure()
"FARPM_LIFT_COEFFICIENT_CL": far.CoeffLift()
"FARPM_DRAG_COEFFICIENT_CD": far.CoeffDrag()
"FARPM_REFAREA": far.RefArea()
"FARPM_MACHNUMBER": fc.MachNumber() - Note: FARPM_MACHNUMBER returns the stock computed Mach number.
"FARPM_TERMINALVELOCITY": far.TerminalVelocity()
"FARPM_BALLISTIC_COEFFICIENT": far.CoeffBallistic()
"FARPM_ANGLE_OF_ATTACK": far.AngleOfAttack() or fc.AngleOfAttack()
"FARPM_SIDESLIP": far.Sideslip() or fc.Sideslip()
"FARPM_THRUST_SPECIFIC_FUEL_CONSUMPTION": far.SpecFuelConsumption()
"FARPM_STALL_FRACTION": far.StallFraction()
