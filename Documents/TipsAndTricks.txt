A collection of various tips & tricks (or best practices, if you prefer) collected during
development.  These tips are for IVA makers (specifically, config-file editors), not for
players in-game.


USE CONSISTENT ORDERING

Try to be consistent
with the order of values when using mathematical expressions in variable names.

Currently, MAS does not know that "2*fc.GetValue()" and "fc.GetValue()*2" are the same.  Thus, it will create
a unique variable for each of these configurations, and it will evaluate the same thing twice,
with all of the extra computational overhead that that entails.

A future version of MAS may be able to relax this restriction, but it is good practice to use consistent
ordering conventions.


TAKE ADVANTAGE OF BOOLEAN MODE WHEN POSSIBLE

Many MASComponent actions support Boolean Mode, where the controlling variable is treated as true
or false.  Whenever possible, take advantage of that mode, since it requires the least
computational overhead (is the new number greater than 0 or not?).


USE THE Lua math LIBRARY AND THE mas LIBRARY

Lua's math library provides a fair amount of built-in math capabilities, as described
here: http://lua-users.org/wiki/MathLibraryTutorial.  One use for this is with
LED-style displays where there are a limited number of digits.  You can prevent overflow
by using something like `math.min(fc.ResourceStageCurrent("LiquidFuel"), 9999)` - in
this example, we're using a 4-segment LED, so we can't display a value larger than 9999.

In addition, the MAS "standard library" provides some handy specialized functions for use
in variables (and in custom Lua scripts).  Refer to the MAS Standard Library chapter for more
details.


USE Lua SPARINGLY

Compared to C# code, Lua interpreted code is very slow - close to 16x slower than C#
code.  It is very flexible, so it should be used where its power is advantageous, but
try not to duplicate existing functionality in Lua script.  MAS has a built-in text
parser, and it can convert most variables to MSIL delegates.


USE TEXT MARKUP SPARINGLY IN TEXT THAT ONLY CHANGES COLOR

The various text markup tags (eg [b] and [/b], [@x#], etc) force Avionics System to generate
the displayed text from scratch every time, even when only the color of the text is being
changed.  This is much more costly than simply changing the color for non-tagged text.
It should be avoided for static labels that use color changing whenever possible.


AUTOMATIC SCRIPTED ACTION CAN BE CREATED IN VARIABLES

If you want an automatically-triggered action to take place, it needs to reside in a variable
used by a MASComponent or an active MASMonitor page.  For instance, say you want an "automatic
cutoff" function that will immediately turn off engines when a vessel lands.  Use a
persistent variable to control whether it's enabled (so it won't prevent launches, for example),
and add a prop to your IVA that will be used to provide feedback whether the mode is enabled.
In the prop, instead of querying the persistent, call a custom Lua function like this:

```Lua
function myAutoCutoffFunction()
    local cutoffEnabled = fc.GetPersistentAsNumber("myCutoffEnabled")
    if cutoffEnabled > 0 then
        if fc.VesselLanded() > 0 and fc.GetEnginesEnabled() > 0 then
            fc.ToggleEnginesEnabled()
        end
    end

  return cutoffEnabled
end
```

This will return 1 if the cutoff is enabled, and 0 if it isn't.  It also has the side-effect of making
the cutoff trigger if it is enabled, the vessel is landed, and the engines are enabled.
