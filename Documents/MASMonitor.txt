The MASMonitor prop module powers monitor displays, ranging from simple single-line
digital readouts to full-featured MFDs.  MASMonitor is more complex to set up than
a MASComponent, since it entails a render texture and multiple pages.  The MASMonitor
is comparable to the RasterPropMonitor class, but it is substantially more flexible
in its design.

When placing components in a monitor, the upper left corner is treated as the
origin (0, 0), and positive Y is "down" on the display.  For graphical components,
displacement is by pixel, while text displacement is by character (based on the fontSize).

MODULE
{
  name = MASMonitor

  screenTransform = FlatMon40x10Screen
  //layer = _Emissive
  screenSize = 512, 512
  font = InconsolataGo-Bold
  fontSize = 16, 32
  textColor = 255, 255, 255, 255
  backgroundColor = 0, 0, 32, 255
  monitorID = %AUTOID%

  //++ TODO
  //variable = blah
  //range = blah
  //disabledColor = blah ?
  //-- TODO

  page = Standby_Page
  page = Orbit_Page
  ...
}

The configuration parameters are

'screenTransform': Required.  The name of the transform in the prop that contains a screen display.
'layer': Optional.  Defaults to '_Emissive'.  A space-separated list of the layers in 'screenTransform'
that will be rendered to.
'screenSize': Required.  The width and height of the render texture that the monitor will use.
'font': Required.  The name of the font (bundled, system, or user) that is used for rendering text.
-TODO: Comma-separated list, and support multiple fonts-
'fontSize': Required.  The width and height of the text that is rendered on the monitor, in screen
pixel size.  All texts will be fixed-width, even if the referenced font is not.
'textColor': Required.  The default color of text rendered on the screen.  Colors may be overridden
with tags (see Formatted Rich Text).
'backgroundColor': Required.  The color the monitor will be cleared to before rendering.
'page': Required.  One or more entries referring to named pages that are displayed on the monitor.
Pages may be omitted, in which case the monitor won't do anything.  The first listed page is the
default page that is visible when first entering IVA.
'monitorID': Optional.  Defaults to '%AUTOID%'.  Specifies the name of the persistent variable used
to contain the current page selection.  Defaulting to %AUTOID% allows on-prop buttons to likewise
use %AUTOID%, but a unique name might be better for a monitor controlled by props located elsewhere.


MAS_PAGE
{
  name = Standby_Page
  
  ...
}

Monitor pages are defined in config files using the MAS_PAGE node type.  Each page must have a
name.  A page may have one or more nodes inside it describing the page layout (text, graphical
objects, etc).  These nodes are layered during rendering, with the first node listed being
the farthest from the camera.  If a page has no nodes, it will result in a completely blank
page.

Individual nodes may be optionally disabled and enabled by querying a variable, in much the way
that MASComponent actions use variables.  Page nodes only support the Boolean and Threshold Modes.

Because fonts are treated as fixed-width, there is the possibility that scaling problems will
cause unusually-wide characters to be compressed horizontally, which may hinder readability.
This problem may be worse if the [hw] tag is used with those fonts.


HORIZONTAL_STRIP

A Horizontal Strip node renders part of a texture in response to a variable input.  It can be
used for a virtual compass instrument or other applications.  The full height of the source
texture is always displayed in a horizontal strip, but only a portion of the width is visible
at any given time.

HORIZONTAL_STRIP
{
	name = Heading
	texture = JSI/RasterPropMonitor/Library/Components/NavBall/hdg2
	position = 448,20
	size = 128,24
	input = fc.Heading()
	inputRange = 0, 360
	displayRange = 0,1024
	displayWidth = 128
	//variable = fc.GetBrakes()
	//range = 0.5, 1.1
}

'name': Optional.  Default '(anonymous)'.  A name for the node.
'texture': Required.  The texture that will be used for the horizontal strip.
'position': Required.  The location on the monitor where the upper-left corner
of the strip will be placed.
'size': Required.  The size of displayed portion of the strip.
'input': Required.  The variable that will be used to control the strip.
'inputRange': Required.  The range of values that will affect the position of
the displayed strip.  The result of 'input' is clamped to this range.
'displayRange': Required.  Controls how the 'inputRange' is mapped to texture
locations.  Lists the position in pixels for the lower and upper bound of
the displayed image.  For instance, in the above example, when heading is 0,
the 0 pixel location is in the center of the strip.  When the heading is 180,
the 512 pixel is visible.
'displayWidth': Required.  The width of the visible portion of 'texture', in
pixels as measured on the texture.  Eg, if the texture is 512 pixels wide, and
you want the 25% of it visible, you would use 'displayWidth = 128'.
'variable': Optional.  When present, the variable will control whether this strip
is rendered or not.
'range': Optional.  Ignored if 'variable' is not present.  When present, the
'variable' operates in Threshold Mode; when absent, the 'variable' operates in
Boolean Mode.


IMAGE

An Image node renders an image.  The image's position and size may be specified, including resizing
the image from its original.

IMAGE
{
	name = PFD overlay
	texture = JSI/RasterPropMonitor/Library/Components/NavBall/StaticMask
	//position = 128,256
	//size = 256,256
	//variable = fc.GetBrakes()
	//range = 0.5, 1.1
}

'name': Optional.  Default '(anonymous)'.  A name for the node.
'texture': Required.  A URI to the texture that will be displayed.
'position': Optional.  Default (0,0).  The pixel offset from the upper-left
corner of the page.
'size': Optional.  Defaults to the native size of the texture.  Specifies the
desired pixel width and height of the image.
'variable': Optional.  When present, the variable will control whether this image
is rendered or not.
'range': Optional.  Ignored if 'variable' is not present.  When present, the
'variable' operates in Threshold Mode; when absent, the 'variable' operates in
Boolean Mode.


NAVBALL

A NavBall node is used to render a navball on the monitor.  This can be used to
create a primary flight display, or, with the right configuration, a 3D spherical
HUD navigation aid.

NAVBALL
{
	name = PFD navball
	model = JSI/RasterPropMonitor/Library/Components/NavBall/NavBall
	texture = JSI/RasterPropMonitor/Library/Components/NavBall/NavBall000
	//position = 256, 256
	size = 340, 340
	//opacity = 0.9
	//color = 0, 255, 0, 200
	//variable = fc.GetBrakes()
	//range = 0.5, 1.5
}

'name': Optional.  Default '(anonymous)'.  A name for the node.
'model': Required.  The URI to the navball model.  While this is typically a
simple sphere, there is no requirement to use a ball for this component.
'texture': Required.  The texture that is applied to the navball model.
'position': Optional.  Default the middle of the screen.  A displacement to
move the navball on the screen.
'size': Required.  Specifies the pixel width and height of the image.
Note that the navball is rendered to a square, so using a non-square size here
will distort the shape of the navball.
'opacity': Optional.  Defaults to 1.0.  Controls the alpha value of the navball.
Setting this value less than one will make the navball partially transparent.
'color': Optional.  When present, all icon markers will use this color instead
of stock-default colors.  This option may make the navball harder to read, since
multiple direction vectors use the same icons.
'variable': Optional.  When present, the variable will control whether the navball
is rendered or not.
'range': Optional.  Ignored if 'variable' is not present.  When present, the
'variable' operates in Threshold Mode; when absent, the 'variable' operates in
Boolean Mode.


TEXT

A Text node renders text.  This text may be static (unchanging) data, or it may use variables.
Simple text can be defined in the Text node using a 'text' field, while complex or multi-line
text residing in a separate file may referenced with a 'textfile' field.  All text supports
Formatted Rich Text.

These text nodes are not as complex as a Text Label - there are no controls for alignment,
font size, anchors, etc.  However, they still support Formatted Rich Text.

TEXT
{
  name = Important Text
  text = Hello, world!
  //textfile = AvionicsSystems/Sample/helloworld.txt
  //font = InconsolataGo-Bold
  //fontSize = 16, 32
  //textColor = 0, 255, 0, 255
  //position = 0,0
  //variable = fc.GetRCS()
  //range = 0.5, 1.5
}

'name': Optional.  Default '(anonymous)'.  A name for the node.
'text': Required if there is not a 'textfile' entry.  Text that is displayed for
this node, similar to a Text Label action in MASComponent.
'textfile': Required if there is not a 'text' entry; ignored if there is a
'text' field.  Refers to a text file that contains the text that will be rendered.
The 'textfile' is usually the better choice for multi-line text.
'font': Optional. A comma separated list of fonts that will be used for rendering
this text.  The first font is the default font.  If this parameter is omitted,
the font listed in MASMonitor is used.
'fontSize': Optional.  The width and height of this text as rendered on the
screen.  If it is omitted, the default fromn MASMonitor is used.
'textColor': Optional.  The default text color for this text.  If the entry is
omitted, the default found in MASMonitor is used.
'position': Optional.  Default (0, 0).  An offset from the upper-left corner for
the text being rendered.  The offset is in units of character columns and rows,
not pixels.
'variable': Optional.  When present, the variable will control whether this text
is rendered or not.
'range': Optional.  Ignored if 'variable' is not present.  When present, the
'variable' operates in Threshold Mode; when absent, the 'variable' operates in
Boolean Mode.


VERTICAL_STRIP

A Vertical Strip node renders part of a texture in response to a variable input.  It can be
used for a aircraft VSI and altitude strips on a HUD or other applications.  The full width of the source
texture is always displayed in a vertical strip, but only a portion of the height is visible
at any given time.

VERTICAL_STRIP
{
	name = VSI
	texture = JSI/RasterPropMonitor/Library/Components/HUD/leftscale
	position = 86,64
	size = 64,320
	input = fc.PseudoLog10(fc.VerticalSpeed())
	inputRange = -5, 5
	displayRange = 1845,208
	displayWidth = 640
	//variable = fc.GetBrakes()
	//range = 0.5, 1.1
}

'name': Optional.  Default '(anonymous)'.  A name for the node.
'texture': Required.  The texture that will be used for the horizontal strip.
'position': Required.  The location on the monitor where the upper-left corner
of the strip will be placed.
'size': Required.  The size of displayed portion of the strip.
'input': Required.  The variable that will be used to control the strip.
'inputRange': Required.  The range of values that will affect the position of
the displayed strip.  The result of 'input' is clamped to this range.
'displayRange': Required.  Controls how the 'inputRange' is mapped to texture
locations.  Lists the position in pixels for the lower and upper bound of
the displayed image.  Pixels count up from the top of the image (the top of the
image is '0', the bottom is whatever the height of the image is).
'displayHeight': Required.  The height of the visible portion of 'texture', in
pixels as measured on the texture.  Eg, if the texture is 512 pixels tall, and
you want the 25% of it visible, you would use 'displayHeight = 128'.
'variable': Optional.  When present, the variable will control whether this strip
is rendered or not.
'range': Optional.  Ignored if 'variable' is not present.  When present, the
'variable' operates in Threshold Mode; when absent, the 'variable' operates in
Boolean Mode.
