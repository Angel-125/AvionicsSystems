TODO:

Major components that need to be ported or handled somehow.

Non-prop modules:

* InternalCameraTargetHelper

* JSIExternalCameraSelector

* JSIRadar

* JSISetInternalCameraFOV

Prop Modules

* RasterPropMonitor - the big one...

  + Callback System for variables, so the callback flags a "this text needs updated".  Being able to flag per-row would be even better.
  + Look into custom UnityEngine.Font for RPM-style fonts so there can be a single text rendering path.

JSIVariableAnimator / JSICallbackAnimator components

* animation (JSIVariableAnimator set to a specific position)

* exterior animation - Bobcat used this; does alexustas?

- play animation (JSIActionGroupSwitch). complete.

- color shift. complete: Boolean Mode, Threshold Mode, Blend Mode, flash (for Boolean and Threshold).

* rotation

* translation

- scale. complete: can use Boolean, Threshold, and Blend.

- texture shift.  complete: Static, Boolean, Threshold, and Blend.

* texture scale

- alarm sound. complete: can play audio when the variable transitions into range, out of range, both, or looping (into range).

* resource consumption

Handlers (non-prop control stuff)

* JSI bridge modules (plugins)

* JSIGraphingBackground

* JSIHeadsUpDisplay

* JSIOdometer

* JSIPrimaryFlightDisplay

* JSISteerableCamera

* JSIVariableGraph

* MFD pages (JSITargeMenu, MechJebRPM)

* RPM extension bridges (SCANsat, VesselView, DPAI background handlers; FAR variables)

* RPM interop?  Talk to RPM about some data (maybe to ease adoption of AS).
Persistents might be helpful.

Support Components
- Some of this will be tricky, since it's code from GPL projects.  I may have
to do some learnin' and write the replacement functionality on my own.

* SIFormatter

* OrbitExtensions

* Protractor

* Resources

* AeroExtensions

* CelestialBodyExtensions

Design Research

* Use coroutines (or threads?!?) for some continual-refinement processing (eg, landing location estimator).

* Rudimentary parser that can identify identical variables (eg, 'fc.GetRCS() * 2' and 'fc.GetRCS()*2'; even
better, also '2*fc.GetRCS()'), to eliminate duplicate values caused by inconsistent use of whitespace and
ordering.

* Can the persistents be flagged somehow in the FixedUpdate polling?  They're only updated through
specific methods, so I can reduce overhead by moving all persistent variable tests out of the update
list.

* Is WaitForFixedUpdate the right coroutine yield to use?  Should I use WaitForSeconds with a time interval
of whatever the update delta is?

* Create a "standard library" of methods for the Lua environment, so there can be things
like "DoThisIfThereIsPower(function-to-do)".

StdLib ideas:

Clamp(value, min, max)

Map(value, min, max, mappedMin, mappedMax)
