TODO:

Major components that need to be ported or handled somehow.

Non-prop modules:

* InternalCameraTargetHelper

* JSIExternalCameraSelector

* JSIRadar

* JSISetInternalCameraFOV

Prop Modules

* RasterPropMonitor - the big one...

  + DONE and IMPLEMENTED: Callback System for variables, so the callback flags a "this text needs updated".  Being able to flag per-row would be even better.
  + DONE and IMPLEMENTED: Look into custom UnityEngine.Font for RPM-style fonts so there can be a single text rendering path.
  + Custom formatters.  Replaced or updated most of them.

JSIVariableAnimator / JSICallbackAnimator components

* animation (JSIVariableAnimator set to a specific position)

* exterior animation - Bobcat used this; does alexustas?

- play animation (JSIActionGroupSwitch). complete.

- color shift. complete: Boolean Mode, Threshold Mode, Blend Mode, flash (for Boolean and Threshold).

* dynamic color.  new feature: use a Lua script to return the color, instead of having passiveColor and activeColor.

- rotation. complete: can use Boolean, Threshold, Blend, and Static.

* translation

- scale. complete: can use Boolean, Threshold, and Blend.

- texture shift.  complete: Static, Boolean, Threshold, and Blend.

* texture scale

- alarm sound. complete: can play audio when the variable transitions into range, out of range, both, or looping (into range).

* resource consumption

Handlers (non-prop control stuff)

* IJSI modules (plugins)

* JSIGraphingBackground

- JSIHeadsUpDisplay: complete (except cropping shader) as MASPageHorizon ('HORIZON').

* JSIOdometer

- JSIPrimaryFlightDisplay: complete.  Replaced with MASPageNavBall ('NAVBALL').

* JSISteerableCamera

* JSIVariableGraph

* MFD pages (JSITargeMenu, MechJebRPM)

* RPM extension bridges (SCANsat, VesselView, DPAI background handlers; FAR variables)

* RPM interop?  Talk to RPM about some data (maybe to ease adoption of AS).
Persistents might be helpful.

Support Components
- Some of this will be tricky, since it's code from GPL projects.  I may have
to do some learnin' and write the replacement functionality on my own.

* Custom formatters
 + SIP: Changed behavior (RPM was: _05.2 -> 5 characters max, 2 after decimal, pad left with zeros, and add a blank after the number but before the character.
  * Add '=' instead of '_' pad with a blank when there is no prefix character (to keep vertical alignment)
 - U2K, U2P: Not needed - can be done in the variable directly.
 - DMS: -- no.  Replace with LAT and LON
  * d = degrees, no zero padding
  * dd = degrees, zero padding (per d, so ddd -> 000)
  * m = minutes, no padding
  * mm = minutes, zero padding
  * s, ss = as above, but for seconds
  * + = insert appropriate degree - minute - second character if it immediately follows d, m, or s
  * N, S, E, W = Replace with N/S or E/W as appropriate.
 + KDT, MET: Done
  * + = Prefix with '+' or '-'
  * - = Prefix with '-' for negative, nothing for positive.
  * y = years (pad per character)
  * d = days (add 1 for KDT)
  * D = days (as if there are no years)
  * h = hours
  * H = hours (as if there are no days/years)
  * s = seconds
  * S = seconds (same pattern)
  * f = fractions of a second
  * all other characters are passed through unchanged
 * BAR: Does this make sense given the ability to draw actual bar graphs?  I think it still has utility.
  * BAR[<bar character>[<empty character>[<trailer character>]]],<total length>[,<minimum>[,<maximum>]]

* OrbitExtensions

* Protractor

* Resources

* AeroExtensions

* CelestialBodyExtensions

Design Research

* Use coroutines (or threads?!?) for some continual-refinement processing (eg, landing location estimator).

* Rudimentary parser that can identify identical variables (eg, 'fc.GetRCS() * 2' and 'fc.GetRCS()*2'; even
better, also '2*fc.GetRCS()'), to eliminate duplicate values caused by inconsistent use of whitespace and
ordering.

* Can the persistents be flagged somehow in the FixedUpdate polling?  They're only updated through
specific methods, so I can reduce overhead by moving all persistent variable tests out of the update
list.

* Is WaitForFixedUpdate the right coroutine yield to use?  Should I use WaitForSeconds with a time interval
of whatever the update delta is?

+ DONE and IMPLEMENTED: User-defined fonts - Unity.Font has ways to add user-defined fonts based on bitmaps and character maps.
Use that instead of the RPM system of a texture + text file with manual mapping.

* Create a "standard library" of methods for the Lua environment, so there can be things
like "DoThisIfThereIsPower(function-to-do)".

StdLib ideas:

Clamp(value, min, max)

Map(value, min, max, mappedMin, mappedMax)

fc.AddPersistentClamped("name", delta, min, max)

fc.AddPersistentWrap("name", delta, min, max)
